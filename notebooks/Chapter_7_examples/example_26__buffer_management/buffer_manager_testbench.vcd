$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module buffer_manager_testbench $end
  $var wire 32 ? BUFFER_DEPTH [31:0] $end
  $var wire 32 @ DATA_WIDTH [31:0] $end
  $var wire 32 A CLK_PERIOD [31:0] $end
  $var wire 1 > clk $end
  $var wire 1 + reset_n $end
  $var wire 1 , write_enable $end
  $var wire 1 - read_enable $end
  $var wire 8 . write_data [7:0] $end
  $var wire 8 4 read_data [7:0] $end
  $var wire 1 5 buffer_full $end
  $var wire 1 6 buffer_empty $end
  $var wire 3 7 occupancy_count [2:0] $end
  $var wire 8 # test_write_sequence[0] [7:0] $end
  $var wire 8 $ test_write_sequence[1] [7:0] $end
  $var wire 8 % test_write_sequence[2] [7:0] $end
  $var wire 8 & test_write_sequence[3] [7:0] $end
  $var wire 8 ' test_write_sequence[4] [7:0] $end
  $var wire 8 ( test_write_sequence[5] [7:0] $end
  $var wire 8 ) test_write_sequence[6] [7:0] $end
  $var wire 8 * test_write_sequence[7] [7:0] $end
  $var wire 8 / expected_read_data [7:0] $end
  $var wire 8 0 captured_read_data [7:0] $end
  $scope module buffer_manager_instance $end
   $var wire 32 ? BUFFER_DEPTH [31:0] $end
   $var wire 32 @ DATA_WIDTH [31:0] $end
   $var wire 1 > clk $end
   $var wire 1 + reset_n $end
   $var wire 1 , write_enable $end
   $var wire 1 - read_enable $end
   $var wire 8 . write_data [7:0] $end
   $var wire 8 4 read_data [7:0] $end
   $var wire 1 5 buffer_full $end
   $var wire 1 6 buffer_empty $end
   $var wire 3 7 occupancy_count [2:0] $end
   $var wire 8 8 memory_pool[0] [7:0] $end
   $var wire 8 9 memory_pool[1] [7:0] $end
   $var wire 8 : memory_pool[2] [7:0] $end
   $var wire 8 ; memory_pool[3] [7:0] $end
   $var wire 2 < write_pointer [1:0] $end
   $var wire 2 = read_pointer [1:0] $end
   $var wire 3 7 data_count [2:0] $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 1 write_index [31:0] $end
  $upscope $end
  $scope module unnamedblk2 $end
   $var wire 32 2 read_index [31:0] $end
  $upscope $end
  $scope module unnamedblk3 $end
   $var wire 32 3 sim_index [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b10101010 #
b10111011 $
b11001100 %
b11011101 &
b11101110 '
b11111111 (
b00010001 )
b00100010 *
0+
0,
0-
b00000000 .
b00000000 /
b00000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000 4
05
16
b000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00 <
b00 =
0>
b00000000000000000000000000000100 ?
b00000000000000000000000000001000 @
b00000000000000000000000000001010 A
#5
1>
#10
0>
#15
1+
1>
#20
0>
#25
1,
b10101010 .
b10101010 4
06
b001 7
b10101010 8
b01 <
1>
#30
0>
#35
b10111011 .
b00000000000000000000000000000001 1
b010 7
b10111011 9
b10 <
1>
#40
0>
#45
b11001100 .
b00000000000000000000000000000010 1
b011 7
b11001100 :
b11 <
1>
#50
0>
#55
b11011101 .
b00000000000000000000000000000011 1
15
b100 7
b11011101 ;
b00 <
1>
#60
0>
#65
b11111111 .
b00000000000000000000000000000100 1
1>
#70
0>
#75
0,
1-
b10101010 /
b10101010 0
b10111011 4
05
b011 7
b01 =
1>
#80
0>
#85
b10111011 /
b10111011 0
b00000000000000000000000000000001 2
b11001100 4
b010 7
b10 =
1>
#90
0>
#95
b11001100 /
b11001100 0
b00000000000000000000000000000010 2
b11011101 4
b001 7
b11 =
1>
#100
0>
#105
b11011101 /
b11011101 0
b00000000000000000000000000000011 2
b10101010 4
16
b000 7
b00 =
1>
#110
0>
#115
b00000000000000000000000000000100 2
1>
#120
0>
#125
1,
0-
b11101110 .
b11101110 4
06
b001 7
b11101110 8
b01 <
1>
#130
0>
#135
1-
b11111111 .
b11101110 0
b11111111 4
b11111111 9
b10 <
b01 =
1>
#140
0>
#145
b00010001 .
b11111111 0
b00000000000000000000000000000110 3
b00010001 4
b00010001 :
b11 <
b10 =
1>
#150
0>
#155
b00100010 .
b00010001 0
b00000000000000000000000000000111 3
b00100010 4
b00100010 ;
b00 <
b11 =
1>
#160
0>
#165
0,
0-
b00000000000000000000000000001000 3
1>
#170
0>
#175
1>
#180
0>
#185
1>
