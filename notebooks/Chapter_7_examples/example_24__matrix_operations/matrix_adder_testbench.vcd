$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module matrix_adder_testbench $end
  $var wire 32 @! MATRIX_SIZE [31:0] $end
  $var wire 32 A! DATA_WIDTH [31:0] $end
  $var wire 32 B! CLOCK_PERIOD [31:0] $end
  $var wire 1 ?! clock_signal $end
  $var wire 1 # reset_signal $end
  $var wire 1 $ start_operation $end
  $var wire 8 % test_matrix_a[0][0] [7:0] $end
  $var wire 8 & test_matrix_a[0][1] [7:0] $end
  $var wire 8 ' test_matrix_a[0][2] [7:0] $end
  $var wire 8 ( test_matrix_a[0][3] [7:0] $end
  $var wire 8 ) test_matrix_a[1][0] [7:0] $end
  $var wire 8 * test_matrix_a[1][1] [7:0] $end
  $var wire 8 + test_matrix_a[1][2] [7:0] $end
  $var wire 8 , test_matrix_a[1][3] [7:0] $end
  $var wire 8 - test_matrix_a[2][0] [7:0] $end
  $var wire 8 . test_matrix_a[2][1] [7:0] $end
  $var wire 8 / test_matrix_a[2][2] [7:0] $end
  $var wire 8 0 test_matrix_a[2][3] [7:0] $end
  $var wire 8 1 test_matrix_a[3][0] [7:0] $end
  $var wire 8 2 test_matrix_a[3][1] [7:0] $end
  $var wire 8 3 test_matrix_a[3][2] [7:0] $end
  $var wire 8 4 test_matrix_a[3][3] [7:0] $end
  $var wire 8 5 test_matrix_b[0][0] [7:0] $end
  $var wire 8 6 test_matrix_b[0][1] [7:0] $end
  $var wire 8 7 test_matrix_b[0][2] [7:0] $end
  $var wire 8 8 test_matrix_b[0][3] [7:0] $end
  $var wire 8 9 test_matrix_b[1][0] [7:0] $end
  $var wire 8 : test_matrix_b[1][1] [7:0] $end
  $var wire 8 ; test_matrix_b[1][2] [7:0] $end
  $var wire 8 < test_matrix_b[1][3] [7:0] $end
  $var wire 8 = test_matrix_b[2][0] [7:0] $end
  $var wire 8 > test_matrix_b[2][1] [7:0] $end
  $var wire 8 ? test_matrix_b[2][2] [7:0] $end
  $var wire 8 @ test_matrix_b[2][3] [7:0] $end
  $var wire 8 A test_matrix_b[3][0] [7:0] $end
  $var wire 8 B test_matrix_b[3][1] [7:0] $end
  $var wire 8 C test_matrix_b[3][2] [7:0] $end
  $var wire 8 D test_matrix_b[3][3] [7:0] $end
  $var wire 8 E expected_result[0][0] [7:0] $end
  $var wire 8 F expected_result[0][1] [7:0] $end
  $var wire 8 G expected_result[0][2] [7:0] $end
  $var wire 8 H expected_result[0][3] [7:0] $end
  $var wire 8 I expected_result[1][0] [7:0] $end
  $var wire 8 J expected_result[1][1] [7:0] $end
  $var wire 8 K expected_result[1][2] [7:0] $end
  $var wire 8 L expected_result[1][3] [7:0] $end
  $var wire 8 M expected_result[2][0] [7:0] $end
  $var wire 8 N expected_result[2][1] [7:0] $end
  $var wire 8 O expected_result[2][2] [7:0] $end
  $var wire 8 P expected_result[2][3] [7:0] $end
  $var wire 8 Q expected_result[3][0] [7:0] $end
  $var wire 8 R expected_result[3][1] [7:0] $end
  $var wire 8 S expected_result[3][2] [7:0] $end
  $var wire 8 T expected_result[3][3] [7:0] $end
  $var wire 8 W actual_result[0][0] [7:0] $end
  $var wire 8 X actual_result[0][1] [7:0] $end
  $var wire 8 Y actual_result[0][2] [7:0] $end
  $var wire 8 Z actual_result[0][3] [7:0] $end
  $var wire 8 [ actual_result[1][0] [7:0] $end
  $var wire 8 \ actual_result[1][1] [7:0] $end
  $var wire 8 ] actual_result[1][2] [7:0] $end
  $var wire 8 ^ actual_result[1][3] [7:0] $end
  $var wire 8 _ actual_result[2][0] [7:0] $end
  $var wire 8 ` actual_result[2][1] [7:0] $end
  $var wire 8 a actual_result[2][2] [7:0] $end
  $var wire 8 b actual_result[2][3] [7:0] $end
  $var wire 8 c actual_result[3][0] [7:0] $end
  $var wire 8 d actual_result[3][1] [7:0] $end
  $var wire 8 e actual_result[3][2] [7:0] $end
  $var wire 8 f actual_result[3][3] [7:0] $end
  $var wire 1 g operation_complete $end
  $var wire 32 U successful_tests [31:0] $end
  $var wire 32 V total_tests [31:0] $end
  $scope module matrix_processor_instance $end
   $var wire 32 @! MATRIX_SIZE [31:0] $end
   $var wire 32 A! DATA_WIDTH [31:0] $end
   $var wire 1 ?! clock_signal $end
   $var wire 1 # reset_signal $end
   $var wire 1 $ start_operation $end
   $var wire 8 % matrix_a_input[0][0] [7:0] $end
   $var wire 8 & matrix_a_input[0][1] [7:0] $end
   $var wire 8 ' matrix_a_input[0][2] [7:0] $end
   $var wire 8 ( matrix_a_input[0][3] [7:0] $end
   $var wire 8 ) matrix_a_input[1][0] [7:0] $end
   $var wire 8 * matrix_a_input[1][1] [7:0] $end
   $var wire 8 + matrix_a_input[1][2] [7:0] $end
   $var wire 8 , matrix_a_input[1][3] [7:0] $end
   $var wire 8 - matrix_a_input[2][0] [7:0] $end
   $var wire 8 . matrix_a_input[2][1] [7:0] $end
   $var wire 8 / matrix_a_input[2][2] [7:0] $end
   $var wire 8 0 matrix_a_input[2][3] [7:0] $end
   $var wire 8 1 matrix_a_input[3][0] [7:0] $end
   $var wire 8 2 matrix_a_input[3][1] [7:0] $end
   $var wire 8 3 matrix_a_input[3][2] [7:0] $end
   $var wire 8 4 matrix_a_input[3][3] [7:0] $end
   $var wire 8 5 matrix_b_input[0][0] [7:0] $end
   $var wire 8 6 matrix_b_input[0][1] [7:0] $end
   $var wire 8 7 matrix_b_input[0][2] [7:0] $end
   $var wire 8 8 matrix_b_input[0][3] [7:0] $end
   $var wire 8 9 matrix_b_input[1][0] [7:0] $end
   $var wire 8 : matrix_b_input[1][1] [7:0] $end
   $var wire 8 ; matrix_b_input[1][2] [7:0] $end
   $var wire 8 < matrix_b_input[1][3] [7:0] $end
   $var wire 8 = matrix_b_input[2][0] [7:0] $end
   $var wire 8 > matrix_b_input[2][1] [7:0] $end
   $var wire 8 ? matrix_b_input[2][2] [7:0] $end
   $var wire 8 @ matrix_b_input[2][3] [7:0] $end
   $var wire 8 A matrix_b_input[3][0] [7:0] $end
   $var wire 8 B matrix_b_input[3][1] [7:0] $end
   $var wire 8 C matrix_b_input[3][2] [7:0] $end
   $var wire 8 D matrix_b_input[3][3] [7:0] $end
   $var wire 8 W matrix_result_output[0][0] [7:0] $end
   $var wire 8 X matrix_result_output[0][1] [7:0] $end
   $var wire 8 Y matrix_result_output[0][2] [7:0] $end
   $var wire 8 Z matrix_result_output[0][3] [7:0] $end
   $var wire 8 [ matrix_result_output[1][0] [7:0] $end
   $var wire 8 \ matrix_result_output[1][1] [7:0] $end
   $var wire 8 ] matrix_result_output[1][2] [7:0] $end
   $var wire 8 ^ matrix_result_output[1][3] [7:0] $end
   $var wire 8 _ matrix_result_output[2][0] [7:0] $end
   $var wire 8 ` matrix_result_output[2][1] [7:0] $end
   $var wire 8 a matrix_result_output[2][2] [7:0] $end
   $var wire 8 b matrix_result_output[2][3] [7:0] $end
   $var wire 8 c matrix_result_output[3][0] [7:0] $end
   $var wire 8 d matrix_result_output[3][1] [7:0] $end
   $var wire 8 e matrix_result_output[3][2] [7:0] $end
   $var wire 8 f matrix_result_output[3][3] [7:0] $end
   $var wire 1 g operation_complete $end
   $var wire 8 h matrix_a_storage[0][0] [7:0] $end
   $var wire 8 i matrix_a_storage[0][1] [7:0] $end
   $var wire 8 j matrix_a_storage[0][2] [7:0] $end
   $var wire 8 k matrix_a_storage[0][3] [7:0] $end
   $var wire 8 l matrix_a_storage[1][0] [7:0] $end
   $var wire 8 m matrix_a_storage[1][1] [7:0] $end
   $var wire 8 n matrix_a_storage[1][2] [7:0] $end
   $var wire 8 o matrix_a_storage[1][3] [7:0] $end
   $var wire 8 p matrix_a_storage[2][0] [7:0] $end
   $var wire 8 q matrix_a_storage[2][1] [7:0] $end
   $var wire 8 r matrix_a_storage[2][2] [7:0] $end
   $var wire 8 s matrix_a_storage[2][3] [7:0] $end
   $var wire 8 t matrix_a_storage[3][0] [7:0] $end
   $var wire 8 u matrix_a_storage[3][1] [7:0] $end
   $var wire 8 v matrix_a_storage[3][2] [7:0] $end
   $var wire 8 w matrix_a_storage[3][3] [7:0] $end
   $var wire 8 x matrix_b_storage[0][0] [7:0] $end
   $var wire 8 y matrix_b_storage[0][1] [7:0] $end
   $var wire 8 z matrix_b_storage[0][2] [7:0] $end
   $var wire 8 { matrix_b_storage[0][3] [7:0] $end
   $var wire 8 | matrix_b_storage[1][0] [7:0] $end
   $var wire 8 } matrix_b_storage[1][1] [7:0] $end
   $var wire 8 ~ matrix_b_storage[1][2] [7:0] $end
   $var wire 8 !! matrix_b_storage[1][3] [7:0] $end
   $var wire 8 "! matrix_b_storage[2][0] [7:0] $end
   $var wire 8 #! matrix_b_storage[2][1] [7:0] $end
   $var wire 8 $! matrix_b_storage[2][2] [7:0] $end
   $var wire 8 %! matrix_b_storage[2][3] [7:0] $end
   $var wire 8 &! matrix_b_storage[3][0] [7:0] $end
   $var wire 8 '! matrix_b_storage[3][1] [7:0] $end
   $var wire 8 (! matrix_b_storage[3][2] [7:0] $end
   $var wire 8 )! matrix_b_storage[3][3] [7:0] $end
   $var wire 8 *! result_storage[0][0] [7:0] $end
   $var wire 8 +! result_storage[0][1] [7:0] $end
   $var wire 8 ,! result_storage[0][2] [7:0] $end
   $var wire 8 -! result_storage[0][3] [7:0] $end
   $var wire 8 .! result_storage[1][0] [7:0] $end
   $var wire 8 /! result_storage[1][1] [7:0] $end
   $var wire 8 0! result_storage[1][2] [7:0] $end
   $var wire 8 1! result_storage[1][3] [7:0] $end
   $var wire 8 2! result_storage[2][0] [7:0] $end
   $var wire 8 3! result_storage[2][1] [7:0] $end
   $var wire 8 4! result_storage[2][2] [7:0] $end
   $var wire 8 5! result_storage[2][3] [7:0] $end
   $var wire 8 6! result_storage[3][0] [7:0] $end
   $var wire 8 7! result_storage[3][1] [7:0] $end
   $var wire 8 8! result_storage[3][2] [7:0] $end
   $var wire 8 9! result_storage[3][3] [7:0] $end
   $var wire 1 :! operation_in_progress $end
   $var wire 4 ;! row_counter [3:0] $end
   $var wire 4 <! column_counter [3:0] $end
   $scope module unnamedblk3 $end
    $var wire 32 =! i [31:0] $end
    $scope module unnamedblk4 $end
     $var wire 32 >! j [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
0$
b00000000 %
b00000000 &
b00000000 '
b00000000 (
b00000000 )
b00000000 *
b00000000 +
b00000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000 =
b00000000 >
b00000000 ?
b00000000 @
b00000000 A
b00000000 B
b00000000 C
b00000000 D
b00000000 E
b00000000 F
b00000000 G
b00000000 H
b00000000 I
b00000000 J
b00000000 K
b00000000 L
b00000000 M
b00000000 N
b00000000 O
b00000000 P
b00000000 Q
b00000000 R
b00000000 S
b00000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000 W
b00000000 X
b00000000 Y
b00000000 Z
b00000000 [
b00000000 \
b00000000 ]
b00000000 ^
b00000000 _
b00000000 `
b00000000 a
b00000000 b
b00000000 c
b00000000 d
b00000000 e
b00000000 f
0g
b00000000 h
b00000000 i
b00000000 j
b00000000 k
b00000000 l
b00000000 m
b00000000 n
b00000000 o
b00000000 p
b00000000 q
b00000000 r
b00000000 s
b00000000 t
b00000000 u
b00000000 v
b00000000 w
b00000000 x
b00000000 y
b00000000 z
b00000000 {
b00000000 |
b00000000 }
b00000000 ~
b00000000 !!
b00000000 "!
b00000000 #!
b00000000 $!
b00000000 %!
b00000000 &!
b00000000 '!
b00000000 (!
b00000000 )!
b00000000 *!
b00000000 +!
b00000000 ,!
b00000000 -!
b00000000 .!
b00000000 /!
b00000000 0!
b00000000 1!
b00000000 2!
b00000000 3!
b00000000 4!
b00000000 5!
b00000000 6!
b00000000 7!
b00000000 8!
b00000000 9!
0:!
b0000 ;!
b0000 <!
b00000000000000000000000000000100 =!
b00000000000000000000000000000100 >!
0?!
b00000000000000000000000000000100 @!
b00000000000000000000000000001000 A!
b00000000000000000000000000001010 B!
#5
1?!
#10
0?!
#15
1?!
#20
0?!
#25
0#
1?!
#30
0?!
#35
1$
b00000001 %
b00000010 &
b00000011 '
b00000100 (
b00000101 )
b00000110 *
b00000111 +
b00001000 ,
b00001001 -
b00001010 .
b00001011 /
b00001100 0
b00001101 1
b00001110 2
b00001111 3
b00010000 4
b00000010 6
b00000100 7
b00000110 8
b00000010 9
b00000100 :
b00000110 ;
b00001000 <
b00000100 =
b00000110 >
b00001000 ?
b00001010 @
b00000110 A
b00001000 B
b00001010 C
b00001100 D
b00000001 E
b00000100 F
b00000111 G
b00001010 H
b00000111 I
b00001010 J
b00001101 K
b00010000 L
b00001101 M
b00010000 N
b00010011 O
b00010110 P
b00010011 Q
b00010110 R
b00011001 S
b00011100 T
b00000000000000000000000000000001 V
b00000001 h
b00000010 i
b00000011 j
b00000100 k
b00000101 l
b00000110 m
b00000111 n
b00001000 o
b00001001 p
b00001010 q
b00001011 r
b00001100 s
b00001101 t
b00001110 u
b00001111 v
b00010000 w
b00000010 y
b00000100 z
b00000110 {
b00000010 |
b00000100 }
b00000110 ~
b00001000 !!
b00000100 "!
b00000110 #!
b00001000 $!
b00001010 %!
b00000110 &!
b00001000 '!
b00001010 (!
b00001100 )!
1:!
1?!
#40
0?!
#45
0$
b00000001 W
b00000100 X
b00000111 Y
b00001010 Z
b00000111 [
b00001010 \
b00001101 ]
b00010000 ^
b00001101 _
b00010000 `
b00010011 a
b00010110 b
b00010011 c
b00010110 d
b00011001 e
b00011100 f
1g
b00000001 *!
b00000100 +!
b00000111 ,!
b00001010 -!
b00000111 .!
b00001010 /!
b00001101 0!
b00010000 1!
b00001101 2!
b00010000 3!
b00010011 4!
b00010110 5!
b00010011 6!
b00010110 7!
b00011001 8!
b00011100 9!
0:!
1?!
#50
0?!
#55
b00000000000000000000000000000001 U
0g
1?!
#60
0?!
#65
1?!
#70
0?!
#75
1?!
#80
0?!
#85
1?!
#90
0?!
#95
1?!
#100
0?!
#105
1?!
