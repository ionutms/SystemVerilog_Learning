$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module stack_processor_testbench $end
  $var wire 16 # test_data_values[0] [15:0] $end
  $var wire 16 $ test_data_values[1] [15:0] $end
  $var wire 16 % test_data_values[2] [15:0] $end
  $var wire 16 & test_data_values[3] [15:0] $end
  $var wire 16 ' test_data_values[4] [15:0] $end
  $var wire 16 ( test_data_values[5] [15:0] $end
  $var wire 16 ) test_data_values[6] [15:0] $end
  $var wire 16 * test_data_values[7] [15:0] $end
  $var wire 16 + test_data_values[8] [15:0] $end
  $var wire 16 , test_data_values[9] [15:0] $end
  $var wire 1 - push_result $end
  $var wire 1 . pop_result $end
  $var wire 1 / peek_result $end
  $var wire 16 0 popped_value [15:0] $end
  $var wire 16 1 peeked_value [15:0] $end
  $var wire 32 2 test_iteration [31:0] $end
  $scope module STACK_PROCESSOR_INSTANCE $end
   $var wire 32 < STACK_DEPTH [31:0] $end
   $var wire 32 = DATA_WIDTH [31:0] $end
   $var wire 16 3 memory_stack[0] [15:0] $end
   $var wire 16 4 memory_stack[1] [15:0] $end
   $var wire 16 5 memory_stack[2] [15:0] $end
   $var wire 16 6 memory_stack[3] [15:0] $end
   $var wire 16 7 memory_stack[4] [15:0] $end
   $var wire 16 8 memory_stack[5] [15:0] $end
   $var wire 16 9 memory_stack[6] [15:0] $end
   $var wire 16 : memory_stack[7] [15:0] $end
   $var wire 32 ; stack_pointer [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b1010101111001101 #
b0001001000110100 $
b1101111010101101 %
b1011111011101111 &
b1100101011111110 '
b1111101011001110 (
b1111111011101101 )
b1100000011011110 *
b1101101001111010 +
b1111000000001101 ,
0-
0.
0/
b0000000000000000 0
b0000000000000000 1
b00000000000000000000000000000000 2
b0000000000000000 3
b0000000000000000 4
b0000000000000000 5
b0000000000000000 6
b0000000000000000 7
b0000000000000000 8
b0000000000000000 9
b0000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000001000 <
b00000000000000000000000000010000 =
#1
1-
b1010101111001101 3
b00000000000000000000000000000001 ;
#2
b00000000000000000000000000000001 2
b0001001000110100 4
b00000000000000000000000000000010 ;
#3
b00000000000000000000000000000010 2
b1101111010101101 5
b00000000000000000000000000000011 ;
#4
b00000000000000000000000000000011 2
b1011111011101111 6
b00000000000000000000000000000100 ;
#5
b00000000000000000000000000000100 2
b1100101011111110 7
b00000000000000000000000000000101 ;
#6
b00000000000000000000000000000101 2
b1111101011001110 8
b00000000000000000000000000000110 ;
#7
b00000000000000000000000000000110 2
b1111111011101101 9
b00000000000000000000000000000111 ;
#8
b00000000000000000000000000000111 2
b1100000011011110 :
b00000000000000000000000000001000 ;
#9
0-
b00000000000000000000000000001000 2
#10
b00000000000000000000000000001001 2
#11
1.
1/
b1100000011011110 0
b1100000011011110 1
b00000000000000000000000000001010 2
b00000000000000000000000000000111 ;
#12
b1111111011101101 0
b00000000000000000000000000000001 2
b00000000000000000000000000000110 ;
#13
b1111101011001110 0
b00000000000000000000000000000010 2
b00000000000000000000000000000101 ;
#14
b1100101011111110 0
b00000000000000000000000000000011 2
b00000000000000000000000000000100 ;
#15
b1011111011101111 0
b00000000000000000000000000000100 2
b00000000000000000000000000000011 ;
#16
1-
b0111011101110111 0
b00000000000000000000000000000001 2
b1001100110011001 6
b1000100010001000 7
b0111011101110111 8
b00000000000000000000000000000101 ;
#17
b1000100010001000 0
b00000000000000000000000000000010 2
b00000000000000000000000000000100 ;
#18
b1001100110011001 0
b00000000000000000000000000000011 2
b00000000000000000000000000000011 ;
#19
b1101111010101101 0
b00000000000000000000000000000100 2
b00000000000000000000000000000010 ;
#20
b0001001000110100 0
b00000000000000000000000000000101 2
b00000000000000000000000000000001 ;
#21
b1010101111001101 0
b00000000000000000000000000000110 2
b00000000000000000000000000000000 ;
#22
0.
0/
b0000000000000000 0
b0000000000000000 1
