$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module pipeline_testbench $end
  $var wire 1 R clk $end
  $var wire 1 7 reset_n $end
  $var wire 1 8 enable $end
  $var wire 8 9 data_in_a [7:0] $end
  $var wire 8 : data_in_b [7:0] $end
  $var wire 8 ; data_in_c [7:0] $end
  $var wire 16 @ result_correct [15:0] $end
  $var wire 16 A result_incorrect [15:0] $end
  $var wire 1 B valid_out $end
  $var wire 8 # test_a[0] [7:0] $end
  $var wire 8 $ test_a[1] [7:0] $end
  $var wire 8 % test_a[2] [7:0] $end
  $var wire 8 & test_a[3] [7:0] $end
  $var wire 8 ' test_a[4] [7:0] $end
  $var wire 8 ( test_b[0] [7:0] $end
  $var wire 8 ) test_b[1] [7:0] $end
  $var wire 8 * test_b[2] [7:0] $end
  $var wire 8 + test_b[3] [7:0] $end
  $var wire 8 , test_b[4] [7:0] $end
  $var wire 8 - test_c[0] [7:0] $end
  $var wire 8 . test_c[1] [7:0] $end
  $var wire 8 / test_c[2] [7:0] $end
  $var wire 8 0 test_c[3] [7:0] $end
  $var wire 8 1 test_c[4] [7:0] $end
  $var wire 16 2 expected[0] [15:0] $end
  $var wire 16 3 expected[1] [15:0] $end
  $var wire 16 4 expected[2] [15:0] $end
  $var wire 16 5 expected[3] [15:0] $end
  $var wire 16 6 expected[4] [15:0] $end
  $var wire 32 < test_index [31:0] $end
  $var wire 32 = cycle_count [31:0] $end
  $scope module PIPELINE_INSTANCE $end
   $var wire 1 R clk $end
   $var wire 1 7 reset_n $end
   $var wire 1 8 enable $end
   $var wire 8 9 data_in_a [7:0] $end
   $var wire 8 : data_in_b [7:0] $end
   $var wire 8 ; data_in_c [7:0] $end
   $var wire 16 @ result_correct [15:0] $end
   $var wire 16 A result_incorrect [15:0] $end
   $var wire 1 B valid_out $end
   $var wire 8 C stage1_a [7:0] $end
   $var wire 8 D stage1_b [7:0] $end
   $var wire 8 E stage1_c [7:0] $end
   $var wire 1 F stage1_valid $end
   $var wire 9 G stage2_sum [8:0] $end
   $var wire 8 H stage2_c [7:0] $end
   $var wire 1 I stage2_valid $end
   $var wire 16 J stage3_product [15:0] $end
   $var wire 1 K stage3_valid $end
   $var wire 8 L bad_stage1_a [7:0] $end
   $var wire 8 M bad_stage1_b [7:0] $end
   $var wire 8 N bad_stage1_c [7:0] $end
   $var wire 9 O bad_stage2_sum [8:0] $end
   $var wire 8 P bad_stage2_c [7:0] $end
   $var wire 16 Q bad_stage3_product [15:0] $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 > i [31:0] $end
  $upscope $end
  $scope module unnamedblk2 $end
   $var wire 32 ? i [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000101 #
b00001010 $
b00000011 %
b00001000 &
b00001100 '
b00000011 (
b00000010 )
b00000111 *
b00000100 +
b00000001 ,
b00000010 -
b00000100 .
b00000011 /
b00000101 0
b00000110 1
b0000000000010000 2
b0000000000110000 3
b0000000000011110 4
b0000000000111100 5
b0000000001001110 6
07
08
b00000000 9
b00000000 :
b00000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b0000000000000000 @
b0000000000000000 A
0B
b00000000 C
b00000000 D
b00000000 E
0F
b000000000 G
b00000000 H
0I
b0000000000000000 J
0K
b00000000 L
b00000000 M
b00000000 N
b000000000 O
b00000000 P
b0000000000000000 Q
0R
#5
1R
#10
0R
#15
17
18
1F
1R
#20
0R
#25
b00000101 9
b00000011 :
b00000010 ;
b00000000000000000000000000000001 =
b00000000000000000000000000000001 >
b0000000000010000 A
b00000101 C
b00000011 D
b00000010 E
1I
b00000101 L
b00000011 M
b00000010 N
b000001000 O
b00000010 P
b0000000000010000 Q
1R
#30
0R
#35
b00001010 9
b00000010 :
b00000100 ;
b00000000000000000000000000000010 =
b00000000000000000000000000000010 >
b0000000000110000 A
b00001010 C
b00000010 D
b00000100 E
b000001000 G
b00000010 H
1K
b00001010 L
b00000010 M
b00000100 N
b000001100 O
b00000100 P
b0000000000110000 Q
1R
#40
0R
#45
b00000011 9
b00000111 :
b00000011 ;
b00000000000000000000000000000011 =
b00000000000000000000000000000011 >
b0000000000011110 A
1B
b00000011 C
b00000111 D
b00000011 E
b000001100 G
b00000100 H
b0000000000010000 J
b00000011 L
b00000111 M
b00000011 N
b000001010 O
b00000011 P
b0000000000011110 Q
1R
#50
0R
#55
b00001000 9
b00000100 :
b00000101 ;
b00000000000000000000000000000100 =
b00000000000000000000000000000100 >
b0000000000010000 @
b0000000000111100 A
b00001000 C
b00000100 D
b00000101 E
b000001010 G
b00000011 H
b0000000000110000 J
b00001000 L
b00000100 M
b00000101 N
b000001100 O
b00000101 P
b0000000000111100 Q
1R
#60
0R
#65
b00001100 9
b00000001 :
b00000110 ;
b00000000000000000000000000000101 =
b00000000000000000000000000000101 >
b0000000000110000 @
b0000000001001110 A
b00001100 C
b00000001 D
b00000110 E
b000001100 G
b00000101 H
b0000000000011110 J
b00001100 L
b00000001 M
b00000110 N
b000001101 O
b00000110 P
b0000000001001110 Q
1R
#70
0R
#75
b00000000000000000000000000000001 <
b00000000000000000000000000000110 =
b00000000000000000000000000000001 ?
b0000000000011110 @
b000001101 G
b00000110 H
b0000000000111100 J
1R
#80
0R
#85
b00000000000000000000000000000010 <
b00000000000000000000000000000111 =
b00000000000000000000000000000010 ?
b0000000000111100 @
b0000000001001110 J
1R
#90
0R
#95
b00000000000000000000000000000011 <
b00000000000000000000000000001000 =
b00000000000000000000000000000011 ?
b0000000001001110 @
1R
#100
0R
#105
b00000000000000000000000000000100 <
b00000000000000000000000000001001 =
b00000000000000000000000000000100 ?
1R
#110
0R
#115
b00000000000000000000000000000101 <
b00000000000000000000000000001010 =
b00000000000000000000000000000101 ?
1R
#120
0R
#125
b00000000000000000000000000000110 <
b00000000000000000000000000001011 =
b00000000000000000000000000000110 ?
1R
#130
0R
#135
b00000000000000000000000000000111 <
b00000000000000000000000000001100 =
b00000000000000000000000000000111 ?
1R
#140
0R
#145
b00000000000000000000000000001000 <
b00000000000000000000000000001101 =
b00000000000000000000000000001000 ?
1R
