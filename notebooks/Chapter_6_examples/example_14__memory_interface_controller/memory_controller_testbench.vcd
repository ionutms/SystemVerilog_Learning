$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module memory_controller_testbench $end
  $var wire 1 . clk $end
  $var wire 1 # rst_n $end
  $var wire 1 $ cpu_req $end
  $var wire 1 % cpu_wr_en $end
  $var wire 8 & cpu_addr [7:0] $end
  $var wire 16 ' cpu_wr_data [15:0] $end
  $var wire 16 / cpu_rd_data [15:0] $end
  $var wire 1 0 cpu_ready $end
  $var wire 1 1 mem_req $end
  $var wire 1 ) mem_wr_en $end
  $var wire 8 * mem_addr [7:0] $end
  $var wire 16 + mem_wr_data [15:0] $end
  $var wire 16 / mem_rd_data [15:0] $end
  $var wire 1 , mem_ready $end
  $scope module MEMORY_CONTROLLER_INST $end
   $var wire 1 . clk $end
   $var wire 1 # rst_n $end
   $var wire 1 $ cpu_req $end
   $var wire 1 % cpu_wr_en $end
   $var wire 8 & cpu_addr [7:0] $end
   $var wire 16 ' cpu_wr_data [15:0] $end
   $var wire 16 / cpu_rd_data [15:0] $end
   $var wire 1 0 cpu_ready $end
   $var wire 1 1 mem_req $end
   $var wire 1 ) mem_wr_en $end
   $var wire 8 * mem_addr [7:0] $end
   $var wire 16 + mem_wr_data [15:0] $end
   $var wire 16 / mem_rd_data [15:0] $end
   $var wire 1 , mem_ready $end
   $var wire 2 - current_state [1:0] $end
   $var wire 2 2 next_state [1:0] $end
   $var wire 8 * addr_reg [7:0] $end
   $var wire 16 + wr_data_reg [15:0] $end
   $var wire 1 ) wr_en_reg $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 ( i [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
b00000000 &
b0000000000000000 '
b00000000000000000000000000000000 (
0)
b00000000 *
b0000000000000000 +
0,
b00 -
0.
b0000000000000000 /
10
01
b00 2
#5
1.
#10
0.
#15
1.
#20
1#
0.
#25
1.
#30
1$
1%
b00010000 &
b1101111010101101 '
0.
b01 2
#35
1)
b00010000 *
b1101111010101101 +
b01 -
1.
b1010101111001101 /
00
11
b10 2
#40
0$
0.
#45
1,
b10 -
1.
b1101111010101101 /
10
b00 2
#50
0.
#55
b00 -
1.
01
#60
0.
#65
1$
0%
0)
0,
b01 -
1.
00
11
b10 2
#70
0.
#75
0$
1,
b10 -
1.
10
b00 2
#80
0.
#85
b00 -
1.
01
#90
0.
#95
1$
1%
b00100000 &
b1011111011101111 '
1)
b00100000 *
b1011111011101111 +
0,
b01 -
1.
b0001001000110100 /
00
11
b10 2
#100
0.
#105
0$
1,
b10 -
1.
b1011111011101111 /
10
b00 2
#110
0.
#115
b00 -
1.
01
#120
0.
#125
1$
0%
0)
0,
b01 -
1.
00
11
b10 2
#130
0.
#135
0$
1,
b10 -
1.
10
b00 2
#140
0.
#145
b00 -
1.
01
#150
0.
#155
1$
1%
b00110000 &
b0001000000000000 '
1)
b00110000 *
b0001000000000000 +
0,
b01 -
1.
b0101011001111000 /
00
11
b10 2
#160
0.
#165
0%
1,
b10 -
1.
b0001000000000000 /
10
b00 2
#170
0.
#175
0$
b00 -
1.
01
#180
0.
#185
1$
1%
b00110001 &
b0001000000000001 '
b00000000000000000000000000000001 (
b00110001 *
b0001000000000001 +
0,
b01 -
1.
b0000000000000000 /
00
11
b10 2
#190
0.
#195
0%
1,
b10 -
1.
b0001000000000001 /
10
b00 2
#200
0.
#205
0$
b00 -
1.
01
#210
0.
#215
1$
1%
b00110010 &
b0001000000000010 '
b00000000000000000000000000000010 (
b00110010 *
b0001000000000010 +
0,
b01 -
1.
b0000000000000000 /
00
11
b10 2
#220
0.
#225
0%
1,
b10 -
1.
b0001000000000010 /
10
b00 2
#230
0.
#235
0$
b00 -
1.
01
#240
0.
#245
b00000000000000000000000000000011 (
0,
1.
#250
0.
#255
1.
#260
0.
#265
1.
#270
0.
#275
1.
#280
0.
#285
1.
#290
0.
#295
1.
