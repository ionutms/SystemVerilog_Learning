$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module multilevel_comb_testbench $end
  $var wire 1 4 a $end
  $var wire 1 5 b $end
  $var wire 1 6 c $end
  $var wire 1 7 d $end
  $var wire 1 > result_blocking $end
  $var wire 1 D result_nonblocking $end
  $var wire 1 8 result_continuous $end
  $var wire 1 8 expected_result $end
  $var wire 4 # test_vectors[0] [3:0] $end
  $var wire 4 $ test_vectors[1] [3:0] $end
  $var wire 4 % test_vectors[2] [3:0] $end
  $var wire 4 & test_vectors[3] [3:0] $end
  $var wire 4 ' test_vectors[4] [3:0] $end
  $var wire 4 ( test_vectors[5] [3:0] $end
  $var wire 4 ) test_vectors[6] [3:0] $end
  $var wire 4 * test_vectors[7] [3:0] $end
  $var wire 4 + test_vectors[8] [3:0] $end
  $var wire 4 , test_vectors[9] [3:0] $end
  $var wire 4 - test_vectors[10] [3:0] $end
  $var wire 4 . test_vectors[11] [3:0] $end
  $var wire 4 / test_vectors[12] [3:0] $end
  $var wire 4 0 test_vectors[13] [3:0] $end
  $var wire 4 1 test_vectors[14] [3:0] $end
  $var wire 4 2 test_vectors[15] [3:0] $end
  $scope module MULTILEVEL_INSTANCE $end
   $var wire 1 4 a $end
   $var wire 1 5 b $end
   $var wire 1 6 c $end
   $var wire 1 7 d $end
   $var wire 1 > result_blocking $end
   $var wire 1 D result_nonblocking $end
   $var wire 1 8 result_continuous $end
   $var wire 1 ? level1_and1_block $end
   $var wire 1 @ level1_and2_block $end
   $var wire 1 A level1_or_block $end
   $var wire 1 B level2_or_block $end
   $var wire 1 C level3_xor_block $end
   $var wire 1 E level1_and1_nonblock $end
   $var wire 1 F level1_and2_nonblock $end
   $var wire 1 G level1_or_nonblock $end
   $var wire 1 H level2_or_nonblock $end
   $var wire 1 I level3_xor_nonblock $end
   $var wire 1 9 level1_and1_cont $end
   $var wire 1 : level1_and2_cont $end
   $var wire 1 ; level1_or_cont $end
   $var wire 1 < level2_or_cont $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 3 i [31:0] $end
  $upscope $end
  $scope module unnamedblk2 $end
   $var wire 32 = i [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000 #
b0001 $
b0010 %
b0011 &
b0100 '
b0101 (
b0110 )
b0111 *
b1000 +
b1001 ,
b1010 -
b1011 .
b1100 /
b1101 0
b1110 1
b1111 2
b00000000000000000000000000010000 3
04
05
06
07
08
09
0:
0;
0<
b00000000000000000000000000000000 =
0>
0?
0@
0A
0B
0C
0D
0E
0F
0G
0H
0I
#6
17
b00000000000000000000000000000001 =
#12
16
07
18
1;
b00000000000000000000000000000010 =
1>
1A
1C
#18
17
08
1:
1<
b00000000000000000000000000000011 =
0>
1@
1B
0C
#24
15
06
07
0:
0;
0<
b00000000000000000000000000000100 =
0@
0A
0B
#30
17
b00000000000000000000000000000101 =
#36
16
07
18
1;
b00000000000000000000000000000110 =
1>
1A
1C
#42
17
08
1:
1<
b00000000000000000000000000000111 =
0>
1@
1B
0C
#48
14
05
06
07
18
0:
0<
b00000000000000000000000000001000 =
1>
0@
0B
1C
#54
17
b00000000000000000000000000001001 =
#60
16
07
b00000000000000000000000000001010 =
#66
17
08
1:
1<
b00000000000000000000000000001011 =
0>
1@
1B
0C
#72
15
06
07
19
0:
b00000000000000000000000000001100 =
1?
0@
#78
17
b00000000000000000000000000001101 =
#84
16
07
b00000000000000000000000000001110 =
#90
17
1:
b00000000000000000000000000001111 =
1@
#96
04
05
06
07
09
0:
0;
0<
b00000000000000000000000000010000 =
0?
0@
0A
0B
#97
14
15
19
1;
1<
1?
1A
1B
#98
05
16
18
09
0<
1>
0?
0B
1C
#99
