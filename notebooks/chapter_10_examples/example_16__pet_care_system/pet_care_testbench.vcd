$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module pet_care_testbench $end
  $scope module test_pets[0] $end
   $var wire 32 2 age [31:0] $end
   $var wire 32 3 pet_type [31:0] $end
  $upscope $end
  $scope module test_pets[1] $end
   $var wire 32 4 age [31:0] $end
   $var wire 32 5 pet_type [31:0] $end
  $upscope $end
  $scope module test_pets[2] $end
   $var wire 32 6 age [31:0] $end
   $var wire 32 7 pet_type [31:0] $end
  $upscope $end
  $scope module mixed_pets[0] $end
   $var wire 32 8 age [31:0] $end
   $var wire 32 9 pet_type [31:0] $end
  $upscope $end
  $scope module mixed_pets[1] $end
   $var wire 32 : age [31:0] $end
   $var wire 32 ; pet_type [31:0] $end
  $upscope $end
  $scope module mixed_pets[2] $end
   $var wire 32 < age [31:0] $end
   $var wire 32 = pet_type [31:0] $end
  $upscope $end
  $scope module mixed_pets[3] $end
   $var wire 32 > age [31:0] $end
   $var wire 32 ? pet_type [31:0] $end
  $upscope $end
  $scope module PET_CARE_INSTANCE $end
   $scope module pet_array[0] $end
    $var wire 32 # age [31:0] $end
    $var wire 32 $ pet_type [31:0] $end
   $upscope $end
   $scope module pet_array[1] $end
    $var wire 32 % age [31:0] $end
    $var wire 32 & pet_type [31:0] $end
   $upscope $end
   $scope module pet_array[2] $end
    $var wire 32 ' age [31:0] $end
    $var wire 32 ( pet_type [31:0] $end
   $upscope $end
   $scope module pet_array[3] $end
    $var wire 32 ) age [31:0] $end
    $var wire 32 * pet_type [31:0] $end
   $upscope $end
   $scope module pet_array[4] $end
    $var wire 32 + age [31:0] $end
    $var wire 32 , pet_type [31:0] $end
   $upscope $end
   $scope module pet_array[5] $end
    $var wire 32 - age [31:0] $end
    $var wire 32 . pet_type [31:0] $end
   $upscope $end
   $scope module unnamedblk1 $end
    $var wire 32 / i [31:0] $end
   $upscope $end
   $scope module unnamedblk2 $end
    $var wire 32 0 i [31:0] $end
   $upscope $end
   $scope module unnamedblk3 $end
    $var wire 32 1 i [31:0] $end
   $upscope $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 @ i [31:0] $end
  $upscope $end
  $scope module unnamedblk2 $end
   $var wire 32 A i [31:0] $end
  $upscope $end
  $scope module unnamedblk3 $end
   $var wire 32 B i [31:0] $end
  $upscope $end
  $scope module unnamedblk4 $end
   $var wire 32 C i [31:0] $end
  $upscope $end
  $scope module unnamedblk5 $end
   $var wire 32 D i [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000101 #
b00000000000000000000000000000000 $
b00000000000000000000000000000011 %
b00000000000000000000000000000001 &
b00000000000000000000000000000010 '
b00000000000000000000000000000010 (
b00000000000000000000000000000111 )
b00000000000000000000000000000000 *
b00000000000000000000000000000100 +
b00000000000000000000000000000001 ,
b00000000000000000000000000000001 -
b00000000000000000000000000000010 .
b00000000000000000000000000000110 /
b00000000000000000000000000000110 0
b00000000000000000000000000000110 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
#10
b00000000000000000000000000000010 2
b00000000000000000000000000000110 4
b00000000000000000000000000000001 5
b00000000000000000000000000000011 6
b00000000000000000000000000000010 7
b00000000000000000000000000000011 @
b00000000000000000000000000000011 A
b00000000000000000000000000000011 B
#15
b00000000000000000000000000000011 8
b00000000000000000000000000000010 :
b00000000000000000000000000000001 ;
b00000000000000000000000000000001 <
b00000000000000000000000000000010 =
b00000000000000000000000000001000 >
b00000000000000000000000000000001 ?
b00000000000000000000000000000011 C
b00000000000000000000000000000100 D
#25
