$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module parameter_vs_type_testbench $end
  $var wire 1 ? clk $end
  $var wire 1 1 reset_n $end
  $var wire 8 6 param8_data_out [7:0] $end
  $var wire 16 7 param16_data_out [15:0] $end
  $var wire 1 8 param8_valid $end
  $var wire 1 9 param16_valid $end
  $var wire 8 2 simple_data_in [7:0] $end
  $var wire 8 : simple_data_out [7:0] $end
  $var wire 24 3 color_data_in [23:0] $end
  $var wire 24 ; color_data_out [23:0] $end
  $var wire 32 4 coord_data_in [31:0] $end
  $var wire 32 < coord_data_out [31:0] $end
  $var wire 1 5 load_enable $end
  $scope module color_reg_inst $end
   $var wire 1 ? clk $end
   $var wire 1 1 reset_n $end
   $var wire 1 5 load_enable $end
   $var wire 24 3 data_in [23:0] $end
   $var wire 24 ; data_out [23:0] $end
   $var wire 24 ; internal_register [23:0] $end
  $upscope $end
  $scope module coord_reg_inst $end
   $var wire 1 ? clk $end
   $var wire 1 1 reset_n $end
   $var wire 1 5 load_enable $end
   $var wire 32 4 data_in [31:0] $end
   $var wire 32 < data_out [31:0] $end
   $var wire 32 < internal_register [31:0] $end
  $upscope $end
  $scope module param_16bit_inst $end
   $var wire 32 @ WIDTH [31:0] $end
   $var wire 32 A DEPTH [31:0] $end
   $var wire 1 ? clk $end
   $var wire 1 1 reset_n $end
   $var wire 16 7 param_data_out [15:0] $end
   $var wire 1 9 param_valid $end
   $var wire 16 # memory[0] [15:0] $end
   $var wire 16 $ memory[1] [15:0] $end
   $var wire 16 % memory[2] [15:0] $end
   $var wire 16 & memory[3] [15:0] $end
   $var wire 2 = addr_counter [1:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 ' i [31:0] $end
   $upscope $end
  $upscope $end
  $scope module param_8bit_inst $end
   $var wire 32 B WIDTH [31:0] $end
   $var wire 32 B DEPTH [31:0] $end
   $var wire 1 ? clk $end
   $var wire 1 1 reset_n $end
   $var wire 8 6 param_data_out [7:0] $end
   $var wire 1 8 param_valid $end
   $var wire 8 ( memory[0] [7:0] $end
   $var wire 8 ) memory[1] [7:0] $end
   $var wire 8 * memory[2] [7:0] $end
   $var wire 8 + memory[3] [7:0] $end
   $var wire 8 , memory[4] [7:0] $end
   $var wire 8 - memory[5] [7:0] $end
   $var wire 8 . memory[6] [7:0] $end
   $var wire 8 / memory[7] [7:0] $end
   $var wire 3 > addr_counter [2:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 0 i [31:0] $end
   $upscope $end
  $upscope $end
  $scope module simple_reg_inst $end
   $var wire 1 ? clk $end
   $var wire 1 1 reset_n $end
   $var wire 1 5 load_enable $end
   $var wire 8 2 data_in [7:0] $end
   $var wire 8 : data_out [7:0] $end
   $var wire 8 : internal_register [7:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b1111111111111111 #
b1111111111111110 $
b1111111111111101 %
b1111111111111100 &
b00000000000000000000000000000100 '
b11111111 (
b11111110 )
b11111101 *
b11111100 +
b11111011 ,
b11111010 -
b11111001 .
b11111000 /
b00000000000000000000000000001000 0
01
b00000000 2
b000000000000000000000000 3
b00000000000000000000000000000000 4
05
b00000000 6
b0000000000000000 7
08
09
b00000000 :
b000000000000000000000000 ;
b00000000000000000000000000000000 <
b00 =
b000 >
0?
b00000000000000000000000000010000 @
b00000000000000000000000000000100 A
b00000000000000000000000000001000 B
#5
1?
#10
0?
#15
1?
#20
0?
#25
11
b11111111 6
b1111111111111111 7
18
19
b01 =
b001 >
1?
#30
0?
#35
b11111110 6
b1111111111111110 7
b10 =
b010 >
1?
#40
0?
#45
b11111101 6
b1111111111111101 7
b11 =
b011 >
1?
#50
0?
#55
b11111100 6
b1111111111111100 7
b00 =
b100 >
1?
#60
0?
#65
b11111011 6
b1111111111111111 7
b01 =
b101 >
1?
#70
0?
#75
b11111010 6
b1111111111111110 7
b10 =
b110 >
1?
#80
0?
#85
b11111001 6
b1111111111111101 7
b11 =
b111 >
1?
#90
0?
#95
b11111000 6
b1111111111111100 7
b00 =
b000 >
1?
#100
0?
#105
b11111111 6
b1111111111111111 7
b01 =
b001 >
1?
#110
0?
#115
b11111110 6
b1111111111111110 7
b10 =
b010 >
1?
#120
0?
#125
b10101011 2
15
b11111101 6
b1111111111111101 7
b10101011 :
b11 =
b011 >
1?
#130
0?
#135
b111111111000000001000000 3
b11111100 6
b1111111111111100 7
b111111111000000001000000 ;
b00 =
b100 >
1?
#140
0?
#145
b00010010001101000101011001111000 4
b11111011 6
b1111111111111111 7
b00010010001101000101011001111000 <
b01 =
b101 >
1?
#150
0?
#155
05
b11111010 6
b1111111111111110 7
b10 =
b110 >
1?
#160
0?
#165
b11111001 6
b1111111111111101 7
b11 =
b111 >
1?
#170
0?
#175
b11111000 6
b1111111111111100 7
b00 =
b000 >
1?
#180
0?
#185
b11111111 6
b1111111111111111 7
b01 =
b001 >
1?
#190
0?
#195
b11111110 6
b1111111111111110 7
b10 =
b010 >
1?
#200
0?
#205
b11111101 6
b1111111111111101 7
b11 =
b011 >
1?
#210
0?
#215
b11111100 6
b1111111111111100 7
b00 =
b100 >
1?
