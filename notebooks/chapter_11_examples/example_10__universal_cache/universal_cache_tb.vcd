$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module universal_cache_tb $end
  $var wire 1 & clk $end
  $var wire 1 ' rst $end
  $var wire 8 ( key [7:0] $end
  $var wire 8 ) value [7:0] $end
  $var wire 1 * put $end
  $var wire 8 + output_value [7:0] $end
  $var wire 1 , hit $end
  $scope module dut $end
   $var wire 32 . KEY_WIDTH [31:0] $end
   $var wire 32 . VALUE_WIDTH [31:0] $end
   $var wire 32 / CACHE_SIZE [31:0] $end
   $var wire 1 & clk $end
   $var wire 1 ' rst $end
   $var wire 8 ( key [7:0] $end
   $var wire 8 ) value [7:0] $end
   $var wire 1 * put $end
   $var wire 8 + output_value [7:0] $end
   $var wire 1 , hit $end
   $var wire 32 # cache_keys [31:0] $end
   $var wire 32 $ cache_values [31:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 % i [31:0] $end
   $upscope $end
   $scope module unnamedblk2 $end
    $var wire 32 - i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
0&
1'
b00000000 (
b00000000 )
0*
b00000000 +
1,
b00000000000000000000000000000000 -
b00000000000000000000000000001000 .
b00000000000000000000000000000100 /
#5
1&
#10
0&
0'
b00000001 (
b00001010 )
1*
0,
b00000000000000000000000000000100 -
#15
b00000000000000000000000000000001 #
b00000000000000000000000000001010 $
b00000000000000000000000000000100 %
1&
b00001010 +
1,
b00000000000000000000000000000000 -
#20
0&
0*
#25
1&
#30
0&
b00000010 (
b00000000 +
0,
b00000000000000000000000000000100 -
#35
1&
#40
0&
b00010100 )
1*
#45
b00000000000000000000000100000010 #
b00000000000000000000101000010100 $
1&
b00010100 +
1,
b00000000000000000000000000000000 -
#50
0&
0*
#55
1&
#60
0&
b00000001 (
b00001010 +
b00000000000000000000000000000001 -
#65
1&
#70
0&
b00000010 (
b00010100 +
b00000000000000000000000000000000 -
#75
1&
#80
0&
b00000011 (
b00000000 +
0,
b00000000000000000000000000000100 -
#85
1&
#90
0&
#95
1&
#100
0&
