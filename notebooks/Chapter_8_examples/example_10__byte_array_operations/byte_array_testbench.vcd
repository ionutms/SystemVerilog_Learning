$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module byte_array_testbench $end
  $var wire 1 1 test_clock $end
  $var wire 1 # test_reset $end
  $var wire 32 $ test_data_word [31:0] $end
  $var wire 2 % test_byte_select [1:0] $end
  $var wire 1 & test_write_enable $end
  $var wire 8 ) result_selected_byte [7:0] $end
  $var wire 1 * result_byte_parity $end
  $var wire 4 + result_nibble_high [3:0] $end
  $var wire 4 , result_nibble_low [3:0] $end
  $scope module BYTE_PROCESSOR_INSTANCE $end
   $var wire 1 1 clock $end
   $var wire 1 # reset $end
   $var wire 32 $ data_word [31:0] $end
   $var wire 2 % byte_select [1:0] $end
   $var wire 1 & write_enable $end
   $var wire 8 ) selected_byte [7:0] $end
   $var wire 1 * byte_parity $end
   $var wire 4 + nibble_high [3:0] $end
   $var wire 4 , nibble_low [3:0] $end
   $var wire 32 2 byte_array_storage [31:0] $end
   $var wire 8 - byte_0 [7:0] $end
   $var wire 8 . byte_1 [7:0] $end
   $var wire 8 / byte_2 [7:0] $end
   $var wire 8 0 byte_3 [7:0] $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 ' byte_index [31:0] $end
  $upscope $end
  $scope module unnamedblk2 $end
   $var wire 32 ( byte_index [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
b00000000000000000000000000000000 $
b00 %
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000 )
0*
b0000 +
b0000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
01
b00000000000000000000000000000000 2
#5
11
#10
0#
b11011110101011011011111011101111 $
1&
01
#15
b11101111 )
1*
b1110 +
b1111 ,
b11101111 -
b10111110 .
b10101101 /
b11011110 0
11
b11011110101011011011111011101111 2
#20
0&
01
#25
b01 %
b00000000000000000000000000000001 '
b10111110 )
0*
b1011 +
b1110 ,
11
#30
b10 %
b00000000000000000000000000000010 '
b10101101 )
1*
b1010 +
b1101 ,
01
#35
b11 %
b00000000000000000000000000000011 '
b11011110 )
0*
b1101 +
b1110 ,
11
#40
b00010010001101000101011001111000 $
1&
b00000000000000000000000000000100 '
01
#45
b00010010 )
b0001 +
b0010 ,
b01111000 -
b01010110 .
b00110100 /
b00010010 0
11
b00010010001101000101011001111000 2
#50
b00 %
0&
b01111000 )
b0111 +
b1000 ,
01
#55
b01 %
b00000000000000000000000000000001 (
b01010110 )
b0101 +
b0110 ,
11
#60
b10 %
b00000000000000000000000000000010 (
b00110100 )
1*
b0011 +
b0100 ,
01
#65
b11 %
b00000000000000000000000000000011 (
b00010010 )
0*
b0001 +
b0010 ,
11
#70
b00000000000000000000000000000100 (
01
#75
11
#80
01
