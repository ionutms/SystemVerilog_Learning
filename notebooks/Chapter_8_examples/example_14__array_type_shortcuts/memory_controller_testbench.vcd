$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module memory_controller_testbench $end
  $var wire 8 ^ expected_cache_data[0] [7:0] $end
  $var wire 8 _ expected_cache_data[1] [7:0] $end
  $var wire 8 ` expected_cache_data[2] [7:0] $end
  $var wire 8 a expected_cache_data[3] [7:0] $end
  $var wire 8 b expected_cache_data[4] [7:0] $end
  $var wire 8 c expected_cache_data[5] [7:0] $end
  $var wire 8 d expected_cache_data[6] [7:0] $end
  $var wire 8 e expected_cache_data[7] [7:0] $end
  $var wire 8 f expected_cache_data[8] [7:0] $end
  $var wire 8 g expected_cache_data[9] [7:0] $end
  $var wire 8 h expected_cache_data[10] [7:0] $end
  $var wire 8 i expected_cache_data[11] [7:0] $end
  $var wire 8 j expected_cache_data[12] [7:0] $end
  $var wire 8 k expected_cache_data[13] [7:0] $end
  $var wire 8 l expected_cache_data[14] [7:0] $end
  $var wire 8 m expected_cache_data[15] [7:0] $end
  $var wire 8 n actual_cache_data[0] [7:0] $end
  $var wire 8 o actual_cache_data[1] [7:0] $end
  $var wire 8 p actual_cache_data[2] [7:0] $end
  $var wire 8 q actual_cache_data[3] [7:0] $end
  $var wire 8 r actual_cache_data[4] [7:0] $end
  $var wire 8 s actual_cache_data[5] [7:0] $end
  $var wire 8 t actual_cache_data[6] [7:0] $end
  $var wire 8 u actual_cache_data[7] [7:0] $end
  $var wire 8 v actual_cache_data[8] [7:0] $end
  $var wire 8 w actual_cache_data[9] [7:0] $end
  $var wire 8 x actual_cache_data[10] [7:0] $end
  $var wire 8 y actual_cache_data[11] [7:0] $end
  $var wire 8 z actual_cache_data[12] [7:0] $end
  $var wire 8 { actual_cache_data[13] [7:0] $end
  $var wire 8 | actual_cache_data[14] [7:0] $end
  $var wire 8 } actual_cache_data[15] [7:0] $end
  $var wire 32 ~ reference_addresses[0] [31:0] $end
  $var wire 32 !! reference_addresses[1] [31:0] $end
  $var wire 32 "! reference_addresses[2] [31:0] $end
  $var wire 32 #! reference_addresses[3] [31:0] $end
  $var wire 32 $! reference_addresses[4] [31:0] $end
  $var wire 32 %! reference_addresses[5] [31:0] $end
  $var wire 32 &! reference_addresses[6] [31:0] $end
  $var wire 32 '! reference_addresses[7] [31:0] $end
  $var wire 8 (! test_packet_sequence[0] [7:0] $end
  $var wire 8 )! test_packet_sequence[1] [7:0] $end
  $var wire 8 *! test_packet_sequence[2] [7:0] $end
  $var wire 8 +! test_packet_sequence[3] [7:0] $end
  $scope module MEMORY_CTRL_INSTANCE $end
   $var wire 8 # cache_line_buffer[0] [7:0] $end
   $var wire 8 $ cache_line_buffer[1] [7:0] $end
   $var wire 8 % cache_line_buffer[2] [7:0] $end
   $var wire 8 & cache_line_buffer[3] [7:0] $end
   $var wire 8 ' cache_line_buffer[4] [7:0] $end
   $var wire 8 ( cache_line_buffer[5] [7:0] $end
   $var wire 8 ) cache_line_buffer[6] [7:0] $end
   $var wire 8 * cache_line_buffer[7] [7:0] $end
   $var wire 8 + cache_line_buffer[8] [7:0] $end
   $var wire 8 , cache_line_buffer[9] [7:0] $end
   $var wire 8 - cache_line_buffer[10] [7:0] $end
   $var wire 8 . cache_line_buffer[11] [7:0] $end
   $var wire 8 / cache_line_buffer[12] [7:0] $end
   $var wire 8 0 cache_line_buffer[13] [7:0] $end
   $var wire 8 1 cache_line_buffer[14] [7:0] $end
   $var wire 8 2 cache_line_buffer[15] [7:0] $end
   $var wire 8 3 write_data_buffer[0] [7:0] $end
   $var wire 8 4 write_data_buffer[1] [7:0] $end
   $var wire 8 5 write_data_buffer[2] [7:0] $end
   $var wire 8 6 write_data_buffer[3] [7:0] $end
   $var wire 8 7 write_data_buffer[4] [7:0] $end
   $var wire 8 8 write_data_buffer[5] [7:0] $end
   $var wire 8 9 write_data_buffer[6] [7:0] $end
   $var wire 8 : write_data_buffer[7] [7:0] $end
   $var wire 8 ; write_data_buffer[8] [7:0] $end
   $var wire 8 < write_data_buffer[9] [7:0] $end
   $var wire 8 = write_data_buffer[10] [7:0] $end
   $var wire 8 > write_data_buffer[11] [7:0] $end
   $var wire 8 ? write_data_buffer[12] [7:0] $end
   $var wire 8 @ write_data_buffer[13] [7:0] $end
   $var wire 8 A write_data_buffer[14] [7:0] $end
   $var wire 8 B write_data_buffer[15] [7:0] $end
   $var wire 32 C memory_address_queue[0] [31:0] $end
   $var wire 32 D memory_address_queue[1] [31:0] $end
   $var wire 32 E memory_address_queue[2] [31:0] $end
   $var wire 32 F memory_address_queue[3] [31:0] $end
   $var wire 32 G memory_address_queue[4] [31:0] $end
   $var wire 32 H memory_address_queue[5] [31:0] $end
   $var wire 32 I memory_address_queue[6] [31:0] $end
   $var wire 32 J memory_address_queue[7] [31:0] $end
   $var wire 32 K pending_address_list[0] [31:0] $end
   $var wire 32 L pending_address_list[1] [31:0] $end
   $var wire 32 M pending_address_list[2] [31:0] $end
   $var wire 32 N pending_address_list[3] [31:0] $end
   $var wire 32 O pending_address_list[4] [31:0] $end
   $var wire 32 P pending_address_list[5] [31:0] $end
   $var wire 32 Q pending_address_list[6] [31:0] $end
   $var wire 32 R pending_address_list[7] [31:0] $end
   $var wire 8 S input_packet_fifo[0] [7:0] $end
   $var wire 8 T input_packet_fifo[1] [7:0] $end
   $var wire 8 U input_packet_fifo[2] [7:0] $end
   $var wire 8 V input_packet_fifo[3] [7:0] $end
   $var wire 8 W output_packet_fifo[0] [7:0] $end
   $var wire 8 X output_packet_fifo[1] [7:0] $end
   $var wire 8 Y output_packet_fifo[2] [7:0] $end
   $var wire 8 Z output_packet_fifo[3] [7:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 [ i [31:0] $end
   $upscope $end
   $scope module unnamedblk2 $end
    $var wire 32 \ j [31:0] $end
   $upscope $end
   $scope module unnamedblk3 $end
    $var wire 32 ] k [31:0] $end
   $upscope $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 ,! i [31:0] $end
  $upscope $end
  $scope module unnamedblk2 $end
   $var wire 32 -! j [31:0] $end
  $upscope $end
  $scope module unnamedblk3 $end
   $var wire 32 .! k [31:0] $end
  $upscope $end
  $scope module unnamedblk4 $end
   $var wire 32 /! p [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00010000 $
b00100000 %
b00110000 &
b01000000 '
b01010000 (
b01100000 )
b01110000 *
b10000000 +
b10010000 ,
b10100000 -
b10110000 .
b11000000 /
b11010000 0
b11100000 1
b11110000 2
b10000000 3
b10000001 4
b10000010 5
b10000011 6
b10000100 7
b10000101 8
b10000110 9
b10000111 :
b10001000 ;
b10001001 <
b10001010 =
b10001011 >
b10001100 ?
b10001101 @
b10001110 A
b10001111 B
b00000000000000000001000000000000 C
b00000000000000000001000000000100 D
b00000000000000000001000000001000 E
b00000000000000000001000000001100 F
b00000000000000000001000000010000 G
b00000000000000000001000000010100 H
b00000000000000000001000000011000 I
b00000000000000000001000000011100 J
b00000000000000000010000000000000 K
b00000000000000000010000000001000 L
b00000000000000000010000000010000 M
b00000000000000000010000000011000 N
b00000000000000000010000000100000 O
b00000000000000000010000000101000 P
b00000000000000000010000000110000 Q
b00000000000000000010000000111000 R
b10000001 S
b10010010 T
b10100011 U
b10110100 V
b00000000 W
b00000000 X
b00000000 Y
b00000000 Z
b00000000000000000000000000010000 [
b00000000000000000000000000001000 \
b00000000000000000000000000000100 ]
b00000000 ^
b00000000 _
b00000000 `
b00000000 a
b00000000 b
b00000000 c
b00000000 d
b00000000 e
b00000000 f
b00000000 g
b00000000 h
b00000000 i
b00000000 j
b00000000 k
b00000000 l
b00000000 m
b00000000 n
b00000000 o
b00000000 p
b00000000 q
b00000000 r
b00000000 s
b00000000 t
b00000000 u
b00000000 v
b00000000 w
b00000000 x
b00000000 y
b00000000 z
b00000000 {
b00000000 |
b00000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000 (!
b00000000 )!
b00000000 *!
b00000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
#1
b00010000 _
b00100000 `
b00110000 a
b01000000 b
b01010000 c
b01100000 d
b01110000 e
b10000000 f
b10010000 g
b10100000 h
b10110000 i
b11000000 j
b11010000 k
b11100000 l
b11110000 m
b00010000 o
b00100000 p
b00110000 q
b01000000 r
b01010000 s
b01100000 t
b01110000 u
b10000000 v
b10010000 w
b10100000 x
b10110000 y
b11000000 z
b11010000 {
b11100000 |
b11110000 }
b00000000000000000001000000000000 ~
b00000000000000000001000000000100 !!
b00000000000000000001000000001000 "!
b00000000000000000001000000001100 #!
b00000000000000000001000000010000 $!
b00000000000000000001000000010100 %!
b00000000000000000001000000011000 &!
b00000000000000000001000000011100 '!
b11110000 (!
b01100010 )!
b11010100 *!
b01000110 +!
b00000000000000000000000000010000 ,!
b00000000000000000000000000001000 -!
b00000000000000000000000000000100 .!
b00000000000000000000000000000100 /!
