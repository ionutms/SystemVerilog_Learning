$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module parallel_adder_generator_testbench $end
  $var wire 4 # a4 [3:0] $end
  $var wire 4 $ b4 [3:0] $end
  $var wire 4 K sum4 [3:0] $end
  $var wire 1 % cin4 $end
  $var wire 1 L cout4 $end
  $var wire 8 & a8 [7:0] $end
  $var wire 8 ' b8 [7:0] $end
  $var wire 8 M sum8 [7:0] $end
  $var wire 1 ( cin8 $end
  $var wire 1 N cout8 $end
  $var wire 2 ) a2 [1:0] $end
  $var wire 2 * b2 [1:0] $end
  $var wire 2 O sum2 [1:0] $end
  $var wire 1 + cin2 $end
  $var wire 1 P cout2 $end
  $scope module adder_2bit $end
   $var wire 32 j WIDTH [31:0] $end
   $var wire 2 ) a [1:0] $end
   $var wire 2 * b [1:0] $end
   $var wire 1 + cin $end
   $var wire 2 O sum [1:0] $end
   $var wire 1 P cout $end
   $var wire 3 Q carry [2:0] $end
   $scope module adder_stage[0] $end
    $scope module fa_inst $end
     $var wire 1 , a $end
     $var wire 1 - b $end
     $var wire 1 + cin $end
     $var wire 1 . sum $end
     $var wire 1 _ cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[1] $end
    $scope module fa_inst $end
     $var wire 1 / a $end
     $var wire 1 0 b $end
     $var wire 1 _ cin $end
     $var wire 1 R sum $end
     $var wire 1 P cout $end
    $upscope $end
   $upscope $end
  $upscope $end
  $scope module adder_4bit $end
   $var wire 32 k WIDTH [31:0] $end
   $var wire 4 # a [3:0] $end
   $var wire 4 $ b [3:0] $end
   $var wire 1 % cin $end
   $var wire 4 K sum [3:0] $end
   $var wire 1 L cout $end
   $var wire 5 S carry [4:0] $end
   $scope module adder_stage[0] $end
    $scope module fa_inst $end
     $var wire 1 1 a $end
     $var wire 1 2 b $end
     $var wire 1 % cin $end
     $var wire 1 3 sum $end
     $var wire 1 ` cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[1] $end
    $scope module fa_inst $end
     $var wire 1 4 a $end
     $var wire 1 5 b $end
     $var wire 1 ` cin $end
     $var wire 1 T sum $end
     $var wire 1 a cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[2] $end
    $scope module fa_inst $end
     $var wire 1 6 a $end
     $var wire 1 7 b $end
     $var wire 1 a cin $end
     $var wire 1 U sum $end
     $var wire 1 b cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[3] $end
    $scope module fa_inst $end
     $var wire 1 8 a $end
     $var wire 1 9 b $end
     $var wire 1 b cin $end
     $var wire 1 V sum $end
     $var wire 1 L cout $end
    $upscope $end
   $upscope $end
  $upscope $end
  $scope module adder_8bit $end
   $var wire 32 l WIDTH [31:0] $end
   $var wire 8 & a [7:0] $end
   $var wire 8 ' b [7:0] $end
   $var wire 1 ( cin $end
   $var wire 8 M sum [7:0] $end
   $var wire 1 N cout $end
   $var wire 9 W carry [8:0] $end
   $scope module adder_stage[0] $end
    $scope module fa_inst $end
     $var wire 1 : a $end
     $var wire 1 ; b $end
     $var wire 1 ( cin $end
     $var wire 1 < sum $end
     $var wire 1 c cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[1] $end
    $scope module fa_inst $end
     $var wire 1 = a $end
     $var wire 1 > b $end
     $var wire 1 c cin $end
     $var wire 1 X sum $end
     $var wire 1 d cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[2] $end
    $scope module fa_inst $end
     $var wire 1 ? a $end
     $var wire 1 @ b $end
     $var wire 1 d cin $end
     $var wire 1 Y sum $end
     $var wire 1 e cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[3] $end
    $scope module fa_inst $end
     $var wire 1 A a $end
     $var wire 1 B b $end
     $var wire 1 e cin $end
     $var wire 1 Z sum $end
     $var wire 1 f cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[4] $end
    $scope module fa_inst $end
     $var wire 1 C a $end
     $var wire 1 D b $end
     $var wire 1 f cin $end
     $var wire 1 [ sum $end
     $var wire 1 g cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[5] $end
    $scope module fa_inst $end
     $var wire 1 E a $end
     $var wire 1 F b $end
     $var wire 1 g cin $end
     $var wire 1 \ sum $end
     $var wire 1 h cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[6] $end
    $scope module fa_inst $end
     $var wire 1 G a $end
     $var wire 1 H b $end
     $var wire 1 h cin $end
     $var wire 1 ] sum $end
     $var wire 1 i cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[7] $end
    $scope module fa_inst $end
     $var wire 1 I a $end
     $var wire 1 J b $end
     $var wire 1 i cin $end
     $var wire 1 ^ sum $end
     $var wire 1 N cout $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000 #
b0000 $
0%
b00000000 &
b00000000 '
0(
b00 )
b00 *
0+
0,
0-
0.
0/
00
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
0D
0E
0F
0G
0H
0I
0J
b0000 K
0L
b00000000 M
0N
b00 O
0P
b000 Q
0R
b00000 S
0T
0U
0V
b000000000 W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
b00000000000000000000000000000010 j
b00000000000000000000000000000100 k
b00000000000000000000000000001000 l
#1
b0101 #
b0011 $
11
12
15
16
b1000 K
b01110 S
1V
1`
1a
1b
#2
b10101010 &
b01010101 '
1(
1;
1=
1@
1A
1D
1E
1H
1I
1N
b111111111 W
1c
1d
1e
1f
1g
1h
1i
#3
b11 )
b01 *
1+
1,
1-
1.
1/
b01 O
1P
b111 Q
1_
#14
