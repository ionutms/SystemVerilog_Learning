$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module port_direction_testbench $end
  $scope module connection_examples_inst $end
   $var wire 1 b clk $end
   $var wire 1 6 reset_n $end
   $var wire 1 7 enable $end
   $var wire 1 8 read_en $end
   $var wire 1 9 write_en $end
   $var wire 8 : data_in [7:0] $end
   $var wire 8 W data_out [7:0] $end
   $var wire 4 ; address [3:0] $end
   $var wire 1 X valid_out $end
   $var wire 1 < ready $end
   $var wire 1 l error $end
   $var wire 2 Y status [1:0] $end
   $var wire 8 c data_bus [7:0] $end
   $var wire 1 d bus_enable $end
   $var wire 8 = ext_bus_data [7:0] $end
   $var wire 1 > ext_bus_drive $end
   $var wire 8 ? debug_data [7:0] $end
   $var wire 1 @ debug_valid $end
   $var wire 16 A data_in_16 [15:0] $end
   $var wire 16 Z data_out_16 [15:0] $end
   $var wire 8 B addr_16 [7:0] $end
   $var wire 1 [ valid_16 $end
   $var wire 1 < ready_16 $end
   $var wire 1 l error_16 $end
   $var wire 2 \ status_16 [1:0] $end
   $var wire 16 e data_bus_16 [15:0] $end
   $var wire 1 f bus_enable_16 $end
   $var wire 16 C debug_data_16 [15:0] $end
   $var wire 1 D debug_valid_16 $end
   $var wire 8 ] data_out_min [7:0] $end
   $var wire 1 ^ valid_min $end
   $var wire 1 < ready_min $end
   $var wire 1 l error_min $end
   $var wire 2 _ status_min [1:0] $end
   $var wire 8 m data_bus_min [7:0] $end
   $var wire 1 l bus_enable_min $end
   $var wire 8 n debug_data_min [7:0] $end
   $var wire 1 o debug_valid_min $end
   $var wire 16 E ext_bus_data_16 [15:0] $end
   $var wire 1 F ext_bus_drive_16 $end
   $scope module demo1_inst $end
    $var wire 32 p DATA_WIDTH [31:0] $end
    $var wire 32 q ADDR_WIDTH [31:0] $end
    $var wire 1 b clk $end
    $var wire 1 6 reset_n $end
    $var wire 1 7 enable $end
    $var wire 8 : data_in [7:0] $end
    $var wire 4 ; address [3:0] $end
    $var wire 1 8 read_enable $end
    $var wire 1 9 write_enable $end
    $var wire 8 W data_out [7:0] $end
    $var wire 1 X valid_out $end
    $var wire 1 < ready $end
    $var wire 1 l error $end
    $var wire 2 Y status [1:0] $end
    $var wire 8 c data_bus [7:0] $end
    $var wire 1 d bus_enable $end
    $var wire 8 ? debug_data [7:0] $end
    $var wire 1 @ debug_valid $end
    $var wire 8 G memory[0] [7:0] $end
    $var wire 8 H memory[1] [7:0] $end
    $var wire 8 I memory[2] [7:0] $end
    $var wire 8 J memory[3] [7:0] $end
    $var wire 8 K memory[4] [7:0] $end
    $var wire 8 L memory[5] [7:0] $end
    $var wire 8 M memory[6] [7:0] $end
    $var wire 8 N memory[7] [7:0] $end
    $var wire 8 O memory[8] [7:0] $end
    $var wire 8 P memory[9] [7:0] $end
    $var wire 8 Q memory[10] [7:0] $end
    $var wire 8 R memory[11] [7:0] $end
    $var wire 8 S memory[12] [7:0] $end
    $var wire 8 T memory[13] [7:0] $end
    $var wire 8 U memory[14] [7:0] $end
    $var wire 8 V memory[15] [7:0] $end
    $var wire 8 W internal_data [7:0] $end
    $var wire 8 W bus_data_out [7:0] $end
    $var wire 1 d bus_drive_enable $end
    $var wire 3 ` state [2:0] $end
    $var wire 1 X internal_valid $end
    $var wire 8 g bus_data_in [7:0] $end
    $var wire 1 h bus_enable_in $end
    $scope module unnamedblk1 $end
     $var wire 32 # i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module demo2_16bit_inst $end
    $var wire 32 r DATA_WIDTH [31:0] $end
    $var wire 32 p ADDR_WIDTH [31:0] $end
    $var wire 1 b clk $end
    $var wire 1 6 reset_n $end
    $var wire 1 7 enable $end
    $var wire 16 A data_in [15:0] $end
    $var wire 8 B address [7:0] $end
    $var wire 1 8 read_enable $end
    $var wire 1 9 write_enable $end
    $var wire 16 Z data_out [15:0] $end
    $var wire 1 [ valid_out $end
    $var wire 1 < ready $end
    $var wire 1 l error $end
    $var wire 2 \ status [1:0] $end
    $var wire 16 e data_bus [15:0] $end
    $var wire 1 f bus_enable $end
    $var wire 16 C debug_data [15:0] $end
    $var wire 1 D debug_valid $end
    $var wire 16 Z internal_data [15:0] $end
    $var wire 16 Z bus_data_out [15:0] $end
    $var wire 1 f bus_drive_enable $end
    $var wire 3 a state [2:0] $end
    $var wire 1 [ internal_valid $end
    $var wire 16 i bus_data_in [15:0] $end
    $var wire 1 j bus_enable_in $end
    $scope module unnamedblk1 $end
     $var wire 32 $ i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module demo3_minimal_inst $end
    $var wire 32 p DATA_WIDTH [31:0] $end
    $var wire 32 q ADDR_WIDTH [31:0] $end
    $var wire 1 b clk $end
    $var wire 1 6 reset_n $end
    $var wire 1 7 enable $end
    $var wire 8 : data_in [7:0] $end
    $var wire 4 ; address [3:0] $end
    $var wire 1 l read_enable $end
    $var wire 1 l write_enable $end
    $var wire 8 ] data_out [7:0] $end
    $var wire 1 ^ valid_out $end
    $var wire 1 < ready $end
    $var wire 1 l error $end
    $var wire 2 _ status [1:0] $end
    $var wire 8 m data_bus [7:0] $end
    $var wire 1 l bus_enable $end
    $var wire 8 n debug_data [7:0] $end
    $var wire 1 o debug_valid $end
    $var wire 8 % memory[0] [7:0] $end
    $var wire 8 & memory[1] [7:0] $end
    $var wire 8 ' memory[2] [7:0] $end
    $var wire 8 ( memory[3] [7:0] $end
    $var wire 8 ) memory[4] [7:0] $end
    $var wire 8 * memory[5] [7:0] $end
    $var wire 8 + memory[6] [7:0] $end
    $var wire 8 , memory[7] [7:0] $end
    $var wire 8 - memory[8] [7:0] $end
    $var wire 8 . memory[9] [7:0] $end
    $var wire 8 / memory[10] [7:0] $end
    $var wire 8 0 memory[11] [7:0] $end
    $var wire 8 1 memory[12] [7:0] $end
    $var wire 8 2 memory[13] [7:0] $end
    $var wire 8 3 memory[14] [7:0] $end
    $var wire 8 4 memory[15] [7:0] $end
    $var wire 8 ] internal_data [7:0] $end
    $var wire 8 ] bus_data_out [7:0] $end
    $var wire 1 l bus_drive_enable $end
    $var wire 3 k state [2:0] $end
    $var wire 1 ^ internal_valid $end
    $var wire 8 m bus_data_in [7:0] $end
    $var wire 1 l bus_enable_in $end
    $scope module unnamedblk1 $end
     $var wire 32 5 i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000010000 #
b00000000000000000000000100000000 $
b00000000 %
b00000001 &
b00000010 '
b00000011 (
b00000100 )
b00000101 *
b00000110 +
b00000111 ,
b00001000 -
b00001001 .
b00001010 /
b00001011 0
b00001100 1
b00001101 2
b00001110 3
b00001111 4
b00000000000000000000000000010000 5
06
07
08
09
b00000000 :
b0000 ;
0<
b00000000 =
0>
b00000000 ?
0@
b0000000000000000 A
b00000000 B
b0000000000000000 C
0D
b0000000000000000 E
0F
b00000000 G
b00000001 H
b00000010 I
b00000011 J
b00000100 K
b00000101 L
b00000110 M
b00000111 N
b00001000 O
b00001001 P
b00001010 Q
b00001011 R
b00001100 S
b00001101 T
b00001110 U
b00001111 V
b00000000 W
0X
b00 Y
b0000000000000000 Z
0[
b00 \
b00000000 ]
0^
b00 _
b000 `
b000 a
0b
b00000000 c
0d
b0000000000000000 e
0f
b00000000 g
0h
b0000000000000000 i
0j
b000 k
0l
b00000000 m
b00000000 n
0o
b00000000000000000000000000001000 p
b00000000000000000000000000000100 q
b00000000000000000000000000010000 r
#5
1b
#10
0b
#15
1b
#20
16
0b
#25
1b
#30
17
19
b10101011 :
b0010 ;
1<
0b
#35
b10101011 I
b10101011 W
1X
b01 Y
1[
b01 \
b001 `
b001 a
1b
b10101011 c
1d
1f
#40
09
0b
b00000000 c
0d
0f
#45
0X
b00 Y
0[
b00 \
b000 `
b000 a
1b
#50
19
b1100110111101111 A
b00000011 B
0b
#55
1X
b01 Y
b1100110111101111 Z
1[
b01 \
b001 `
b001 a
1b
b10101011 c
1d
b1100110111101111 e
1f
#60
09
0b
b00000000 c
0d
b0000000000000000 e
0f
#65
0X
b00 Y
0[
b00 \
b000 `
b000 a
1b
#70
0b
#75
1b
#80
19
b01010101 :
b0001 ;
0b
#85
b01010101 H
b01010101 W
1X
b01 Y
1[
b01 \
b001 `
b001 a
1b
b01010101 c
1d
b1100110111101111 e
1f
#90
09
0b
b00000000 c
0d
b0000000000000000 e
0f
#95
0X
b00 Y
0[
b00 \
b000 `
b000 a
1b
#100
b10101010 =
1>
0b
b10101010 c
b10101010 g
#105
1b
#110
0>
0b
b00000000 c
b00000000 g
#115
1b
#120
b0001001000110100 E
1F
0b
b0001001000110100 e
b0001001000110100 i
#125
1b
#130
0F
0b
b0000000000000000 e
b0000000000000000 i
#135
1b
#140
b00010001 ?
1@
0b
#145
b00100010 ?
1b
#150
b00110011 ?
0b
#155
0@
1b
#160
b0100010101100111 C
1D
0b
#165
b1000100110101011 C
1b
#170
0D
0b
#175
1b
#180
0b
#185
1b
#190
0b
#195
1b
#200
0b
#205
1b
#210
0b
#215
1b
#220
0b
#225
1b
#230
0b
