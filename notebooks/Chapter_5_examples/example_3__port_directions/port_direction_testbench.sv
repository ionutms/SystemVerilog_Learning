// port_direction_testbench.sv
module port_direction_testbench;

    // Instantiate the port connection examples
    port_connection_styles connection_examples_inst();
    
    initial begin
        $dumpfile("port_direction_testbench.vcd");
        $dumpvars(0, port_direction_testbench);
        
        $display();
        $display("================================================================================");
        $display("                        PORT DIRECTION TESTBENCH");
        $display("================================================================================");
        $display();
        $display("This comprehensive testbench demonstrates SystemVerilog port direction types:");
        $display();
        $display("PORT TYPES COVERED:");
        $display("üì• INPUT  - Data flows INTO the module (read-only internally)");
        $display("üì§ OUTPUT - Data flows OUT OF the module (write-only internally)");
        $display("üîÑ INOUT  - Bidirectional data flow (tri-state logic required)");
        $display("üîó REF    - References to external signals (testbench use)");
        $display();
        $display("EXAMPLES INCLUDED:");
        $display("‚Ä¢ Multiple data widths (8-bit and 16-bit)");
        $display("‚Ä¢ Different address widths");
        $display("‚Ä¢ Tri-state bus arbitration");
        $display("‚Ä¢ Reference port monitoring");
        $display("‚Ä¢ Best practices and common mistakes");
        $display();
        $display("================================================================================");
        $display();
        
        // Wait for all examples to complete
        #3000;
        
        $display();
        $display("================================================================================");
        $display("                    PORT DIRECTION BEST PRACTICES SUMMARY");
        $display("================================================================================");
        $display();
        
        $display("üîπ INPUT PORTS:");
        $display("   ‚úÖ GOOD:");
        $display("      ‚Ä¢ Use for clocks, resets, enables, control signals");
        $display("      ‚Ä¢ Use for data inputs and addresses");
        $display("      ‚Ä¢ Can be read anywhere in the module");
        $display("      ‚Ä¢ Connect from external signals or other module outputs");
        $display();
        $display("   ‚ùå AVOID:");
        $display("      ‚Ä¢ Never assign values to input ports internally");
        $display("      ‚Ä¢ Don't leave input ports unconnected (use explicit ties)");
        $display();
        
        $display("üîπ OUTPUT PORTS:");
        $display("   ‚úÖ GOOD:");
        $display("      ‚Ä¢ Use for status signals, processed data, flags");
        $display("      ‚Ä¢ Assign using always_ff, always_comb, or continuous assign");
        $display("      ‚Ä¢ One driver per output signal");
        $display("      ‚Ä¢ Clear reset behavior");
        $display();
        $display("   ‚ùå AVOID:");
        $display("      ‚Ä¢ Never read output ports internally");
        $display("      ‚Ä¢ Don't create multiple drivers");
        $display("      ‚Ä¢ Avoid combinational loops");
        $display();
        
        $display("üîπ INOUT PORTS (Bidirectional):");
        $display("   ‚úÖ GOOD:");
        $display("      ‚Ä¢ Use for true bidirectional buses (I2C, SPI data)");
        $display("      ‚Ä¢ Always implement tri-state logic ('z when not driving)");
        $display("      ‚Ä¢ Clear bus arbitration and ownership");
        $display("      ‚Ä¢ Proper timing for direction changes");
        $display();
        $display("   ‚ùå AVOID:");
        $display("      ‚Ä¢ Don't use unless absolutely necessary");
        $display("      ‚Ä¢ Never drive without tri-state control");
        $display("      ‚Ä¢ Avoid bus conflicts (multiple drivers)");
        $display("      ‚Ä¢ Don't mix logic levels on same bus");
        $display();
        
        $display("üîπ REF PORTS (References):");
        $display("   ‚úÖ GOOD:");
        $display("      ‚Ä¢ Use in testbenches for debugging and monitoring");
        $display("      ‚Ä¢ Allows access without explicit port connections");
        $display("      ‚Ä¢ Great for hierarchical signal access");
        $display("      ‚Ä¢ Useful for assertion and coverage collection");
        $display();
        $display("   ‚ùå AVOID:");
        $display("      ‚Ä¢ Not synthesizable - simulation only");
        $display("      ‚Ä¢ Don't use in production RTL code");
        $display("      ‚Ä¢ Avoid for functional signal passing");
        $display();
        
        $display("================================================================================");
        $display("                           CONNECTION GUIDELINES");
        $display("================================================================================");
        $display();
        
        $display("üî∏ NAMED CONNECTIONS (Recommended):");
        $display("   my_module inst_name (");
        $display("       .clk(system_clock),");
        $display("       .reset_n(system_reset),");
        $display("       .data_in(input_data),");
        $display("       .data_out(output_data)");
        $display("   );");
        $display();
        
        $display("üî∏ PARAMETER OVERRIDES:");
        $display("   my_module #(");
        $display("       .WIDTH(16),");
        $display("       .DEPTH(1024)");
        $display("   ) inst_name (");
        $display("       .clk(clk),");
        $display("       // ... port connections");
        $display("   );");
        $display();
        
        $display("üî∏ TRI-STATE TEMPLATE:");
        $display("   // Control signal");
        $display("   logic drive_enable;");
        $display("   ");
        $display("   // Tri-state driver");
        $display("   assign bidirectional_bus = drive_enable ? output_data : 'z;");
        $display("   ");
        $display("   // Input reading");
        $display("   assign input_data = drive_enable ? 'x : bidirectional_bus;");
        $display();
        
        $display("================================================================================");
        $display("                              COMMON MISTAKES");
        $display("================================================================================");
        $display();
        
        $display("‚ùó Mistake 1: Assigning to input ports");
        $display("   // WRONG:");
        $display("   always_comb data_in = processed_value;  // ERROR!");
        $display("   ");
        $display("   // CORRECT:");
        $display("   always_comb data_out = processed_value;  // OK");
        $display();
        
        $display("‚ùó Mistake 2: Reading output ports internally");
        $display("   // WRONG:");
        $display("   always_comb internal_sig = data_out;  // ERROR!");
        $display("   ");
        $display("   // CORRECT:");
        $display("   always_comb data_out = internal_sig;  // OK");
        $display();
        
        $display("‚ùó Mistake 3: Inout without tri-state");
        $display("   // WRONG:");
        $display("   assign bidirectional = output_data;  // Always drives!");
        $display("   ");
        $display("   // CORRECT:");
        $display("   assign bidirectional = enable ? output_data : 'z;");
        $display();
        
        $display("‚ùó Mistake 4: Positional connections");
        $display("   // WRONG (error-prone):");
        $display("   my_module inst(clk, rst, en, din, dout);");
        $display("   ");
        $display("   // CORRECT (readable):");
        $display("   my_module inst(.clk(clk), .reset_n(rst), .enable(en));");
        $display();
        
        $display("================================================================================");
        $display("                          VERIFICATION CHECKLIST");
        $display("================================================================================");
        $display();
        
        $display("Before finalizing your design, verify:");
        $display();
        $display("üî≤ All input ports are properly connected");
        $display("üî≤ No input ports are assigned internally");
        $display("üî≤ All output ports have single drivers");
        $display("üî≤ No output ports are read internally");
        $display("üî≤ Inout ports use proper tri-state logic");
        $display("üî≤ No bus conflicts on bidirectional signals");
        $display("üî≤ REF ports are used only in testbenches");
        $display("üî≤ All ports have meaningful names");
        $display("üî≤ Parameters are properly documented");
        $display("üî≤ Reset behavior is clearly defined");
        $display();
        
        $display("================================================================================");
        $display("                           TESTBENCH COMPLETED");
        $display("================================================================================");
        $display();
        $display("Key files generated:");
        $display("‚Ä¢ port_direction_demo.sv - Main module with all port types");
        $display("‚Ä¢ port_connection_styles.sv - Connection examples");
        $display("‚Ä¢ port_direction_testbench.sv - This comprehensive testbench");
        $display("‚Ä¢ .env - Project configuration");
        $display();
        $display("View the VCD file to see signal waveforms and timing relationships.");
        $display();
        
        $finish;
    end

endmodule