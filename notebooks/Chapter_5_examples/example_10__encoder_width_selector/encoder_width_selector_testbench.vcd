$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module encoder_width_selector_testbench $end
  $var wire 2 # data_in_2 [1:0] $end
  $var wire 2 ( encoded_out_2 [1:0] $end
  $var wire 4 $ data_in_4 [3:0] $end
  $var wire 4 ) encoded_out_4 [3:0] $end
  $var wire 8 % data_in_8 [7:0] $end
  $var wire 8 * encoded_out_8 [7:0] $end
  $var wire 16 & data_in_16 [15:0] $end
  $var wire 16 + encoded_out_16 [15:0] $end
  $var wire 1 , valid_out_2 $end
  $var wire 1 - valid_out_4 $end
  $var wire 1 . valid_out_8 $end
  $var wire 1 / valid_out_16 $end
  $var wire 3 ' data_in_3 [2:0] $end
  $var wire 2 5 encoded_out_3 [1:0] $end
  $var wire 1 6 valid_out_3 $end
  $scope module encoder_16 $end
   $var wire 32 7 INPUT_WIDTH [31:0] $end
   $var wire 16 & data_in [15:0] $end
   $var wire 4 0 encoded_out [3:0] $end
   $var wire 1 / valid_out $end
   $var wire 32 8 OUTPUT_WIDTH [31:0] $end
   $scope module encoder_16to4 $end
    $scope module unnamedblk1 $end
     $var wire 32 1 i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
  $scope module encoder_2 $end
   $var wire 32 9 INPUT_WIDTH [31:0] $end
   $var wire 2 # data_in [1:0] $end
   $var wire 1 2 encoded_out [0:0] $end
   $var wire 1 , valid_out $end
   $var wire 32 : OUTPUT_WIDTH [31:0] $end
  $upscope $end
  $scope module encoder_4 $end
   $var wire 32 8 INPUT_WIDTH [31:0] $end
   $var wire 4 $ data_in [3:0] $end
   $var wire 2 3 encoded_out [1:0] $end
   $var wire 1 - valid_out $end
   $var wire 32 9 OUTPUT_WIDTH [31:0] $end
  $upscope $end
  $scope module encoder_8 $end
   $var wire 32 ; INPUT_WIDTH [31:0] $end
   $var wire 8 % data_in [7:0] $end
   $var wire 3 4 encoded_out [2:0] $end
   $var wire 1 . valid_out $end
   $var wire 32 < OUTPUT_WIDTH [31:0] $end
  $upscope $end
  $scope module encoder_invalid $end
   $var wire 32 < INPUT_WIDTH [31:0] $end
   $var wire 3 ' data_in [2:0] $end
   $var wire 2 5 encoded_out [1:0] $end
   $var wire 1 6 valid_out $end
   $var wire 32 9 OUTPUT_WIDTH [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00 #
b0000 $
b00000000 %
b0000000000000000 &
b000 '
b00 (
b0000 )
b00000000 *
b0000000000000000 +
0,
0-
0.
0/
b0000 0
b00000000000000000000000000010000 1
02
b00 3
b000 4
b00 5
06
b00000000000000000000000000010000 7
b00000000000000000000000000000100 8
b00000000000000000000000000000010 9
b00000000000000000000000000000001 :
b00000000000000000000000000001000 ;
b00000000000000000000000000000011 <
#1
b01 #
1,
#2
b10 #
b01 (
12
#3
b11 #
b00 (
0,
02
#4
b0001 $
1-
#5
b0100 $
b0010 )
b10 3
#6
b1000 $
b0011 )
b11 3
#7
b00000001 %
1.
#8
b00100000 %
b00000101 *
b101 4
#9
b10000000 %
b00000111 *
b111 4
#10
b0000000000000001 &
1/
b00000000000000000000000000000000 1
#11
b0000001000000000 &
b0000000000001001 +
b1001 0
b00000000000000000000000000001001 1
#12
b1000000000000000 &
b0000000000001111 +
b1111 0
b00000000000000000000000000001111 1
#13
b001 '
#14
b100 '
#25
