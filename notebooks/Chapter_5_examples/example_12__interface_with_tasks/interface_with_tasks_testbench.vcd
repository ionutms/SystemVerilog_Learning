$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module interface_with_tasks_testbench $end
  $scope module DESIGN_INSTANCE_NAME $end
   $var wire 1 9 clock $end
   $scope module bus_if $end
    $var wire 8 $ write_data [7:0] $end
    $var wire 8 ; read_data [7:0] $end
    $var wire 4 % address [3:0] $end
    $var wire 1 & valid $end
    $var wire 1 8 ready $end
    $var wire 1 ' write_enable $end
    $var wire 1 9 clock $end
   $upscope $end
   $scope module master_inst $end
    $scope module bus_if $end
     $var wire 8 $ write_data [7:0] $end
     $var wire 8 ; read_data [7:0] $end
     $var wire 4 % address [3:0] $end
     $var wire 1 & valid $end
     $var wire 1 8 ready $end
     $var wire 1 ' write_enable $end
     $var wire 1 9 clock $end
    $upscope $end
    $var wire 8 # read_data [7:0] $end
   $upscope $end
   $scope module slave_inst $end
    $scope module bus_if $end
     $var wire 8 $ write_data [7:0] $end
     $var wire 8 ; read_data [7:0] $end
     $var wire 4 % address [3:0] $end
     $var wire 1 & valid $end
     $var wire 1 8 ready $end
     $var wire 1 ' write_enable $end
     $var wire 1 9 clock $end
    $upscope $end
    $var wire 8 ( memory[0] [7:0] $end
    $var wire 8 ) memory[1] [7:0] $end
    $var wire 8 * memory[2] [7:0] $end
    $var wire 8 + memory[3] [7:0] $end
    $var wire 8 , memory[4] [7:0] $end
    $var wire 8 - memory[5] [7:0] $end
    $var wire 8 . memory[6] [7:0] $end
    $var wire 8 / memory[7] [7:0] $end
    $var wire 8 0 memory[8] [7:0] $end
    $var wire 8 1 memory[9] [7:0] $end
    $var wire 8 2 memory[10] [7:0] $end
    $var wire 8 3 memory[11] [7:0] $end
    $var wire 8 4 memory[12] [7:0] $end
    $var wire 8 5 memory[13] [7:0] $end
    $var wire 8 6 memory[14] [7:0] $end
    $var wire 8 7 memory[15] [7:0] $end
    $var wire 1 8 ready_internal $end
    $scope module unnamedblk1 $end
     $var wire 32 : i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000000 $
b0000 %
0&
0'
b00000000 (
b00000001 )
b00000010 *
b00000011 +
b00000100 ,
b00000101 -
b00000110 .
b00000111 /
b00001000 0
b00001001 1
b00001010 2
b00001011 3
b00001100 4
b00001101 5
b00001110 6
b00001111 7
08
09
b00000000000000000000000000010000 :
b00000000 ;
#5
19
#10
09
#15
19
#20
09
#25
b01010101 $
b1010 %
1&
1'
18
19
#30
09
#35
b01010101 2
19
#40
09
#45
0&
0'
08
19
#50
09
#55
19
#60
09
#65
1&
18
19
#70
09
#75
19
b01010101 ;
#80
09
#85
19
#90
09
#95
b01010101 #
0&
08
19
#100
09
#105
19
#110
09
#115
19
#120
09
#125
19
#130
09
#135
19
#140
09
#145
19
#150
09
#155
19
#160
09
#165
19
#170
09
#175
19
#180
09
#185
19
#190
09
#195
19
#200
09
