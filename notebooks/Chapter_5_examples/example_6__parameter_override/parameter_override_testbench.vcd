$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module parameter_override_testbench $end
  $var wire 1 d clk $end
  $var wire 1 & reset_n $end
  $var wire 1 ' enable $end
  $var wire 4 a count4 [3:0] $end
  $var wire 8 b count8 [7:0] $end
  $var wire 16 c count16 [15:0] $end
  $var wire 1 e overflow4 $end
  $var wire 1 f overflow8 $end
  $var wire 1 l overflow16 $end
  $var wire 1 l underflow4 $end
  $var wire 1 l underflow8 $end
  $var wire 1 g underflow16 $end
  $var wire 1 ( we8 $end
  $var wire 1 ) we16 $end
  $var wire 1 * we32 $end
  $var wire 4 + addr8 [3:0] $end
  $var wire 3 , addr16 [2:0] $end
  $var wire 2 - addr32 [1:0] $end
  $var wire 8 . din8 [7:0] $end
  $var wire 8 ^ dout8 [7:0] $end
  $var wire 16 / din16 [15:0] $end
  $var wire 16 _ dout16 [15:0] $end
  $var wire 32 0 din32 [31:0] $end
  $var wire 32 ` dout32 [31:0] $end
  $var wire 8 1 alu_a8 [7:0] $end
  $var wire 8 2 alu_b8 [7:0] $end
  $var wire 8 h alu_result8 [7:0] $end
  $var wire 16 3 alu_a16 [15:0] $end
  $var wire 16 4 alu_b16 [15:0] $end
  $var wire 16 i alu_result16 [15:0] $end
  $var wire 4 5 alu_a4 [3:0] $end
  $var wire 4 6 alu_b4 [3:0] $end
  $var wire 4 X alu_result4 [3:0] $end
  $var wire 3 7 alu_op [2:0] $end
  $var wire 1 j alu_valid8 $end
  $var wire 1 k alu_valid16 $end
  $var wire 1 Y alu_valid4 $end
  $scope module alu_16bit_mult $end
   $var wire 32 m WIDTH [31:0] $end
   $var wire 1 n ENABLE_MULT $end
   $var wire 1 o ENABLE_DIV $end
   $var real 64 p DELAY_NS $end
   $var wire 16 3 a [15:0] $end
   $var wire 16 4 b [15:0] $end
   $var wire 3 7 op [2:0] $end
   $var wire 16 i result [15:0] $end
   $var wire 1 k valid $end
   $var wire 3 r ADD [2:0] $end
   $var wire 3 s SUB [2:0] $end
   $var wire 3 t AND [2:0] $end
   $var wire 3 u OR [2:0] $end
   $var wire 3 v XOR [2:0] $end
   $var wire 3 w MUL [2:0] $end
   $var wire 3 x DIV [2:0] $end
   $var wire 16 Z temp_result [15:0] $end
   $var wire 1 [ temp_valid $end
  $upscope $end
  $scope module alu_4bit_full $end
   $var wire 32 y WIDTH [31:0] $end
   $var wire 1 n ENABLE_MULT $end
   $var wire 1 n ENABLE_DIV $end
   $var real 64 z DELAY_NS $end
   $var wire 4 5 a [3:0] $end
   $var wire 4 6 b [3:0] $end
   $var wire 3 7 op [2:0] $end
   $var wire 4 X result [3:0] $end
   $var wire 1 Y valid $end
   $var wire 3 r ADD [2:0] $end
   $var wire 3 s SUB [2:0] $end
   $var wire 3 t AND [2:0] $end
   $var wire 3 u OR [2:0] $end
   $var wire 3 v XOR [2:0] $end
   $var wire 3 w MUL [2:0] $end
   $var wire 3 x DIV [2:0] $end
   $var wire 4 X temp_result [3:0] $end
   $var wire 1 Y temp_valid $end
  $upscope $end
  $scope module alu_basic $end
   $var wire 32 | WIDTH [31:0] $end
   $var wire 1 o ENABLE_MULT $end
   $var wire 1 o ENABLE_DIV $end
   $var real 64 } DELAY_NS $end
   $var wire 8 1 a [7:0] $end
   $var wire 8 2 b [7:0] $end
   $var wire 3 7 op [2:0] $end
   $var wire 8 h result [7:0] $end
   $var wire 1 j valid $end
   $var wire 3 r ADD [2:0] $end
   $var wire 3 s SUB [2:0] $end
   $var wire 3 t AND [2:0] $end
   $var wire 3 u OR [2:0] $end
   $var wire 3 v XOR [2:0] $end
   $var wire 3 w MUL [2:0] $end
   $var wire 3 x DIV [2:0] $end
   $var wire 8 \ temp_result [7:0] $end
   $var wire 1 ] temp_valid $end
  $upscope $end
  $scope module counter_16bit_down $end
   $var wire 32 m WIDTH [31:0] $end
   $var wire 32 !! MAX_COUNT [31:0] $end
   $var wire 32 "! STEP [31:0] $end
   $var wire 1 o UP_DOWN $end
   $var wire 16 #! RESET_VALUE [15:0] $end
   $var wire 1 d clk $end
   $var wire 1 & reset_n $end
   $var wire 1 ' enable $end
   $var wire 16 c count [15:0] $end
   $var wire 1 l overflow $end
   $var wire 1 g underflow $end
   $var wire 16 c counter_reg [15:0] $end
  $upscope $end
  $scope module counter_4bit $end
   $var wire 32 y WIDTH [31:0] $end
   $var wire 32 $! MAX_COUNT [31:0] $end
   $var wire 32 %! STEP [31:0] $end
   $var wire 1 n UP_DOWN $end
   $var wire 4 &! RESET_VALUE [3:0] $end
   $var wire 1 d clk $end
   $var wire 1 & reset_n $end
   $var wire 1 ' enable $end
   $var wire 4 a count [3:0] $end
   $var wire 1 e overflow $end
   $var wire 1 l underflow $end
   $var wire 4 a counter_reg [3:0] $end
  $upscope $end
  $scope module counter_default $end
   $var wire 32 | WIDTH [31:0] $end
   $var wire 32 '! MAX_COUNT [31:0] $end
   $var wire 32 %! STEP [31:0] $end
   $var wire 1 n UP_DOWN $end
   $var wire 8 (! RESET_VALUE [7:0] $end
   $var wire 1 d clk $end
   $var wire 1 & reset_n $end
   $var wire 1 ' enable $end
   $var wire 8 b count [7:0] $end
   $var wire 1 f overflow $end
   $var wire 1 l underflow $end
   $var wire 8 b counter_reg [7:0] $end
  $upscope $end
  $scope module ram_16bit $end
   $var wire 32 m DATA_WIDTH [31:0] $end
   $var wire 32 )! ADDR_WIDTH [31:0] $end
   $var wire 32 | DEPTH [31:0] $end
   $var wire 16 *! INIT_VALUE [15:0] $end
   $var wire 1 d clk $end
   $var wire 1 ) we $end
   $var wire 3 , addr [2:0] $end
   $var wire 16 / din [15:0] $end
   $var wire 16 _ dout [15:0] $end
   $var wire 16 < memory[0] [15:0] $end
   $var wire 16 = memory[1] [15:0] $end
   $var wire 16 > memory[2] [15:0] $end
   $var wire 16 ? memory[3] [15:0] $end
   $var wire 16 @ memory[4] [15:0] $end
   $var wire 16 A memory[5] [15:0] $end
   $var wire 16 B memory[6] [15:0] $end
   $var wire 16 C memory[7] [15:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 # i [31:0] $end
   $upscope $end
  $upscope $end
  $scope module ram_32bit $end
   $var wire 32 +! DATA_WIDTH [31:0] $end
   $var wire 32 "! ADDR_WIDTH [31:0] $end
   $var wire 32 y DEPTH [31:0] $end
   $var wire 32 ,! INIT_VALUE [31:0] $end
   $var wire 1 d clk $end
   $var wire 1 * we $end
   $var wire 2 - addr [1:0] $end
   $var wire 32 0 din [31:0] $end
   $var wire 32 ` dout [31:0] $end
   $var wire 32 D memory[0] [31:0] $end
   $var wire 32 E memory[1] [31:0] $end
   $var wire 32 F memory[2] [31:0] $end
   $var wire 32 G memory[3] [31:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 $ i [31:0] $end
   $upscope $end
  $upscope $end
  $scope module ram_default $end
   $var wire 32 | DATA_WIDTH [31:0] $end
   $var wire 32 y ADDR_WIDTH [31:0] $end
   $var wire 32 m DEPTH [31:0] $end
   $var wire 8 (! INIT_VALUE [7:0] $end
   $var wire 1 d clk $end
   $var wire 1 ( we $end
   $var wire 4 + addr [3:0] $end
   $var wire 8 . din [7:0] $end
   $var wire 8 ^ dout [7:0] $end
   $var wire 8 H memory[0] [7:0] $end
   $var wire 8 I memory[1] [7:0] $end
   $var wire 8 J memory[2] [7:0] $end
   $var wire 8 K memory[3] [7:0] $end
   $var wire 8 L memory[4] [7:0] $end
   $var wire 8 M memory[5] [7:0] $end
   $var wire 8 N memory[6] [7:0] $end
   $var wire 8 O memory[7] [7:0] $end
   $var wire 8 P memory[8] [7:0] $end
   $var wire 8 Q memory[9] [7:0] $end
   $var wire 8 R memory[10] [7:0] $end
   $var wire 8 S memory[11] [7:0] $end
   $var wire 8 T memory[12] [7:0] $end
   $var wire 8 U memory[13] [7:0] $end
   $var wire 8 V memory[14] [7:0] $end
   $var wire 8 W memory[15] [7:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 % i [31:0] $end
   $upscope $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 8 i [31:0] $end
  $upscope $end
  $scope module unnamedblk2 $end
   $var wire 32 9 i [31:0] $end
  $upscope $end
  $scope module unnamedblk3 $end
   $var wire 32 : i [31:0] $end
  $upscope $end
  $scope module unnamedblk4 $end
   $var wire 32 ; op [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000001000 #
b00000000000000000000000000000100 $
b00000000000000000000000000010000 %
0&
0'
0(
0)
0*
b0000 +
b000 ,
b00 -
b00000000 .
b0000000000000000 /
b00000000000000000000000000000000 0
b00000000 1
b00000000 2
b0000000000000000 3
b0000000000000000 4
b0000 5
b0000 6
b000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b1010101010101010 <
b1010101010101010 =
b1010101010101010 >
b1010101010101010 ?
b1010101010101010 @
b1010101010101010 A
b1010101010101010 B
b1010101010101010 C
b11011110101011011011111011101111 D
b11011110101011011011111011101111 E
b11011110101011011011111011101111 F
b11011110101011011011111011101111 G
b00000000 H
b00000000 I
b00000000 J
b00000000 K
b00000000 L
b00000000 M
b00000000 N
b00000000 O
b00000000 P
b00000000 Q
b00000000 R
b00000000 S
b00000000 T
b00000000 U
b00000000 V
b00000000 W
b0000 X
1Y
b0000000000000000 Z
1[
b00000000 \
1]
b00000000 ^
b0000000000000000 _
b00000000000000000000000000000000 `
b0000 a
b00000000 b
b0000000000000000 c
0d
0e
0f
0g
b00000000 h
b0000000000000000 i
0j
0k
0l
b00000000000000000000000000010000 m
1n
0o
r2.5 p
b000 r
b001 s
b010 t
b011 u
b100 v
b101 w
b110 x
b00000000000000000000000000000100 y
r0 z
b00000000000000000000000000001000 |
r1 }
b00000000000000000000000001100100 !!
b00000000000000000000000000000010 "!
b0000000001100100 #!
b00000000000000000000000000001010 $!
b00000000000000000000000000000001 %!
b0000 &!
b00000000000000000000000011111111 '!
b00000000 (!
b00000000000000000000000000000011 )!
b1010101010101010 *!
b00000000000000000000000000100000 +!
b11011110101011011011111011101111 ,!
#1
1j
#3
1k
#5
b1010101010101010 _
b11011110101011011011111011101111 `
b0000000001100100 c
1d
#10
0d
#15
1d
#20
1&
0d
#25
1d
#30
1'
0d
#35
b00000000000000000000000000000001 8
b0001 a
b00000001 b
b0000000001100010 c
1d
#40
0d
#45
b00000000000000000000000000000010 8
b0010 a
b00000010 b
b0000000001100000 c
1d
#50
0d
#55
b00000000000000000000000000000011 8
b0011 a
b00000011 b
b0000000001011110 c
1d
#60
0d
#65
b00000000000000000000000000000100 8
b0100 a
b00000100 b
b0000000001011100 c
1d
#70
0d
#75
b00000000000000000000000000000101 8
b0101 a
b00000101 b
b0000000001011010 c
1d
#80
0d
#85
b00000000000000000000000000000110 8
b0110 a
b00000110 b
b0000000001011000 c
1d
#90
0d
#95
b00000000000000000000000000000111 8
b0111 a
b00000111 b
b0000000001010110 c
1d
#100
0d
#105
b00000000000000000000000000001000 8
b1000 a
b00001000 b
b0000000001010100 c
1d
#110
0d
#115
b00000000000000000000000000001001 8
b1001 a
b00001001 b
b0000000001010010 c
1d
#120
0d
#125
b00000000000000000000000000001010 8
b1010 a
b00001010 b
b0000000001010000 c
1d
1e
#130
0d
#135
b00000000000000000000000000001011 8
b0000 a
b00001011 b
b0000000001001110 c
1d
0e
#140
0d
#145
b00000000000000000000000000001100 8
b0001 a
b00001100 b
b0000000001001100 c
1d
#150
0d
#155
b00000000000000000000000000001101 8
b0010 a
b00001101 b
b0000000001001010 c
1d
#160
0d
#165
b00000000000000000000000000001110 8
b0011 a
b00001110 b
b0000000001001000 c
1d
#170
0d
#175
0'
b00000000000000000000000000001111 8
1d
#180
0d
#185
1(
b00010000 .
b00010000 H
1d
#190
0d
#195
1)
b0010000000000000 /
b0010000000000000 <
b00010000 ^
1d
#200
0d
#205
1*
b00110000000000000000000000000000 0
b00000000000000000000000000000001 9
b00110000000000000000000000000000 D
b0010000000000000 _
1d
#210
0d
#215
b0001 +
b00010001 .
b00010001 I
b00000000 ^
b00110000000000000000000000000000 `
1d
#220
0d
#225
b001 ,
b0010000000000001 /
b0010000000000001 =
b00010001 ^
b1010101010101010 _
1d
#230
0d
#235
b01 -
b00110000000000000000000000000001 0
b00000000000000000000000000000010 9
b00110000000000000000000000000001 E
b0010000000000001 _
b11011110101011011011111011101111 `
1d
#240
0d
#245
b0010 +
b00010010 .
b00010010 J
b00000000 ^
b00110000000000000000000000000001 `
1d
#250
0d
#255
b010 ,
b0010000000000010 /
b0010000000000010 >
b00010010 ^
b1010101010101010 _
1d
#260
0d
#265
b10 -
b00110000000000000000000000000010 0
b00000000000000000000000000000011 9
b00110000000000000000000000000010 F
b0010000000000010 _
b11011110101011011011111011101111 `
1d
#270
0d
#275
b0011 +
b00010011 .
b00010011 K
b00000000 ^
b00110000000000000000000000000010 `
1d
#280
0d
#285
b011 ,
b0010000000000011 /
b0010000000000011 ?
b00010011 ^
b1010101010101010 _
1d
#290
0d
#295
0(
0)
0*
b11 -
b00110000000000000000000000000011 0
b00000000000000000000000000000100 9
b0010000000000011 _
b11011110101011011011111011101111 `
1d
#300
0d
#305
b0000 +
b000 ,
b00 -
b00010000 ^
b0010000000000000 _
b00110000000000000000000000000000 `
1d
#310
0d
#315
1d
#316
b0001 +
b001 ,
b01 -
b00000000000000000000000000000001 :
#320
0d
#325
b00010001 ^
b0010000000000001 _
b00110000000000000000000000000001 `
1d
#326
b0010 +
b010 ,
b10 -
b00000000000000000000000000000010 :
#330
0d
#335
b00010010 ^
b0010000000000010 _
b00110000000000000000000000000010 `
1d
#336
b0011 +
b011 ,
b11 -
b00000000000000000000000000000011 :
#340
0d
#345
b00010011 ^
b0010000000000011 _
b11011110101011011011111011101111 `
1d
#346
b00001111 1
b00001010 2
b0000001111101000 3
b0000000011111010 4
b0111 5
b0011 6
b00000000000000000000000000000100 :
b1010 X
b0000010011100010 Z
b00011001 \
#347
b00011001 h
#348
b0000010011100010 i
#350
0d
#355
1d
#356
b001 7
b00000000000000000000000000000001 ;
b0100 X
b0000001011101110 Z
b00000101 \
#357
b00000101 h
b0000001011101110 i
#360
0d
#365
1d
#366
b010 7
b00000000000000000000000000000010 ;
b0011 X
b0000000011101000 Z
b00001010 \
#367
b00001010 h
#369
b0000000011101000 i
#370
0d
#375
1d
#376
b011 7
b00000000000000000000000000000011 ;
b0111 X
b0000001111111010 Z
b00001111 \
#377
b00001111 h
#378
b0000001111111010 i
#380
0d
#385
1d
#386
b100 7
b00000000000000000000000000000100 ;
b0100 X
b0000001100010010 Z
b00000101 \
#387
b00000101 h
b0000001100010010 i
#390
0d
#395
1d
#396
b101 7
b00000000000000000000000000000101 ;
b0101 X
b1101000010010000 Z
b00000000 \
0]
#397
b00000000 h
0j
#399
b1101000010010000 i
#400
0d
#405
1d
#406
b110 7
b00000000000000000000000000000110 ;
b0010 X
b0000000000000000 Z
0[
#408
b0000000000000000 i
0k
#410
0d
#415
1d
#416
b111 7
b00000000000000000000000000000111 ;
b0000 X
0Y
#420
0d
#425
1d
#426
b00000000000000000000000000001000 ;
