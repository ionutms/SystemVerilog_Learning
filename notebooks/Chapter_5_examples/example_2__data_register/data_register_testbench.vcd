$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module data_register_testbench $end
  $scope module inst_examples $end
   $var wire 1 Q clk $end
   $var wire 1 # reset_n $end
   $var wire 1 $ enable_1 $end
   $var wire 1 % enable_2 $end
   $var wire 1 & enable_3 $end
   $var wire 1 ' enable_4 $end
   $var wire 1 ( load_1 $end
   $var wire 1 ) load_2 $end
   $var wire 1 * load_3 $end
   $var wire 1 + load_4 $end
   $var wire 1 , clear_1 $end
   $var wire 1 - clear_2 $end
   $var wire 1 . clear_3 $end
   $var wire 1 / clear_4 $end
   $var wire 8 0 data_in_1 [7:0] $end
   $var wire 8 1 data_in_2 [7:0] $end
   $var wire 8 2 data_in_3 [7:0] $end
   $var wire 8 3 data_in_4 [7:0] $end
   $var wire 8 4 load_data_1 [7:0] $end
   $var wire 8 5 load_data_2 [7:0] $end
   $var wire 8 6 load_data_3 [7:0] $end
   $var wire 8 7 load_data_4 [7:0] $end
   $var wire 8 A data_out_1 [7:0] $end
   $var wire 8 = data_out_2 [7:0] $end
   $var wire 8 B data_out_3 [7:0] $end
   $var wire 8 C data_out_4 [7:0] $end
   $var wire 1 D valid_1 $end
   $var wire 1 > valid_2 $end
   $var wire 1 E valid_3 $end
   $var wire 1 F valid_4 $end
   $var wire 1 G changed_1 $end
   $var wire 1 ? changed_2 $end
   $var wire 1 H changed_3 $end
   $var wire 1 I changed_4 $end
   $var wire 16 8 data_in_16 [15:0] $end
   $var wire 16 9 load_data_16 [15:0] $end
   $var wire 16 J data_out_16 [15:0] $end
   $var wire 1 : enable_16 $end
   $var wire 1 ; load_16 $end
   $var wire 1 < clear_16 $end
   $var wire 1 K valid_16 $end
   $var wire 1 L changed_16 $end
   $scope module reg1_named_inst $end
    $var wire 32 R WIDTH [31:0] $end
    $var wire 8 S RESET_VALUE [7:0] $end
    $var wire 1 T SYNC_RESET $end
    $var wire 1 Q clk $end
    $var wire 1 # reset_n $end
    $var wire 1 $ enable $end
    $var wire 1 ( load $end
    $var wire 1 , clear $end
    $var wire 8 0 data_in [7:0] $end
    $var wire 8 4 load_data [7:0] $end
    $var wire 8 A data_out [7:0] $end
    $var wire 1 D valid $end
    $var wire 1 G changed $end
    $var wire 8 A data_reg [7:0] $end
    $var wire 8 M prev_data [7:0] $end
    $var wire 1 D valid_reg $end
   $upscope $end
   $scope module reg2_sync_inst $end
    $var wire 32 R WIDTH [31:0] $end
    $var wire 8 U RESET_VALUE [7:0] $end
    $var wire 1 V SYNC_RESET $end
    $var wire 1 Q clk $end
    $var wire 1 # reset_n $end
    $var wire 1 % enable $end
    $var wire 1 ) load $end
    $var wire 1 - clear $end
    $var wire 8 1 data_in [7:0] $end
    $var wire 8 5 load_data [7:0] $end
    $var wire 8 = data_out [7:0] $end
    $var wire 1 > valid $end
    $var wire 1 ? changed $end
    $var wire 8 = data_reg [7:0] $end
    $var wire 8 @ prev_data [7:0] $end
    $var wire 1 > valid_reg $end
   $upscope $end
   $scope module reg3_16bit_inst $end
    $var wire 32 W WIDTH [31:0] $end
    $var wire 16 X RESET_VALUE [15:0] $end
    $var wire 1 T SYNC_RESET $end
    $var wire 1 Q clk $end
    $var wire 1 # reset_n $end
    $var wire 1 : enable $end
    $var wire 1 ; load $end
    $var wire 1 < clear $end
    $var wire 16 8 data_in [15:0] $end
    $var wire 16 9 load_data [15:0] $end
    $var wire 16 J data_out [15:0] $end
    $var wire 1 K valid $end
    $var wire 1 L changed $end
    $var wire 16 J data_reg [15:0] $end
    $var wire 16 N prev_data [15:0] $end
    $var wire 1 K valid_reg $end
   $upscope $end
   $scope module reg4_positional_inst $end
    $var wire 32 R WIDTH [31:0] $end
    $var wire 8 Y RESET_VALUE [7:0] $end
    $var wire 1 T SYNC_RESET $end
    $var wire 1 Q clk $end
    $var wire 1 # reset_n $end
    $var wire 1 & enable $end
    $var wire 1 * load $end
    $var wire 1 . clear $end
    $var wire 8 2 data_in [7:0] $end
    $var wire 8 6 load_data [7:0] $end
    $var wire 8 B data_out [7:0] $end
    $var wire 1 E valid $end
    $var wire 1 H changed $end
    $var wire 8 B data_reg [7:0] $end
    $var wire 8 O prev_data [7:0] $end
    $var wire 1 E valid_reg $end
   $upscope $end
   $scope module reg5_default_inst $end
    $var wire 32 R WIDTH [31:0] $end
    $var wire 8 Y RESET_VALUE [7:0] $end
    $var wire 1 T SYNC_RESET $end
    $var wire 1 Q clk $end
    $var wire 1 # reset_n $end
    $var wire 1 ' enable $end
    $var wire 1 + load $end
    $var wire 1 / clear $end
    $var wire 8 3 data_in [7:0] $end
    $var wire 8 7 load_data [7:0] $end
    $var wire 8 C data_out [7:0] $end
    $var wire 1 F valid $end
    $var wire 1 I changed $end
    $var wire 8 C data_reg [7:0] $end
    $var wire 8 P prev_data [7:0] $end
    $var wire 1 F valid_reg $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
0&
0'
0(
0)
0*
0+
0,
0-
0.
0/
b00010000 0
b00100000 1
b00110000 2
b01000000 3
b11110001 4
b11110010 5
b11110011 6
b11110100 7
b1011111011101111 8
b1100101011111110 9
0:
0;
0<
b00000000 =
0>
0?
b00000000 @
b00000000 A
b00000000 B
b00000000 C
0D
0E
0F
0G
0H
0I
b0000000000000000 J
0K
0L
b00000000 M
b0000000000000000 N
b00000000 O
b00000000 P
0Q
b00000000000000000000000000001000 R
b10101010 S
0T
b01010101 U
1V
b00000000000000000000000000010000 W
b1101111010101101 X
b00000000 Y
#5
b01010101 =
b01010101 @
b10101010 A
b1101111010101101 J
b10101010 M
b1101111010101101 N
1Q
#10
0Q
#15
1Q
#20
1#
0Q
#25
1Q
#30
1$
1%
1&
1'
1:
0Q
#35
b00100000 =
1>
1?
b00010000 A
b00110000 B
b01000000 C
1D
1E
1F
1G
1H
1I
b1011111011101111 J
1K
1L
1Q
#40
1(
1)
1*
1+
1;
0Q
#45
b11110010 =
b00100000 @
b11110001 A
b11110011 B
b11110100 C
b1100101011111110 J
b00010000 M
b1011111011101111 N
b00110000 O
b01000000 P
1Q
#50
0(
0)
0*
0+
1,
1-
1.
1/
0;
1<
0Q
#55
b00000000 =
0>
0?
b11110010 @
b00000000 A
b00000000 B
b00000000 C
0D
0E
0F
0G
0H
0I
b0000000000000000 J
0K
0L
b11110001 M
b1100101011111110 N
b11110011 O
b11110100 P
1Q
#60
0$
0%
0&
0'
0,
0-
0.
0/
0:
0<
0Q
#65
b00000000 @
b00000000 M
b0000000000000000 N
b00000000 O
b00000000 P
1Q
#70
0Q
#75
1Q
#80
0Q
#85
1Q
#90
0Q
#95
1Q
#100
0Q
#105
1Q
#110
0Q
