$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module memory_type_selector_testbench $end
  $var wire 1 X clk $end
  $var wire 1 Y reset $end
  $var wire 1 Z write_en $end
  $var wire 4 [ addr [3:0] $end
  $var wire 8 \ data_in [7:0] $end
  $var wire 8 4 data_out_sram [7:0] $end
  $var wire 8 5 data_out_dram [7:0] $end
  $var wire 8 6 data_out_rom [7:0] $end
  $scope module dram_inst $end
   $var wire 32 ] DATA_WIDTH [31:0] $end
   $var wire 32 ^ ADDR_WIDTH [31:0] $end
   $var wire 1 X clk $end
   $var wire 1 Y reset $end
   $var wire 4 [ addr [3:0] $end
   $var wire 8 \ data_in [7:0] $end
   $var wire 1 Z write_en $end
   $var wire 8 5 data_out [7:0] $end
   $var wire 32 _ DEPTH [31:0] $end
   $scope module dram_memory $end
    $var wire 8 7 mem[0] [7:0] $end
    $var wire 8 8 mem[1] [7:0] $end
    $var wire 8 9 mem[2] [7:0] $end
    $var wire 8 : mem[3] [7:0] $end
    $var wire 8 ; mem[4] [7:0] $end
    $var wire 8 < mem[5] [7:0] $end
    $var wire 8 = mem[6] [7:0] $end
    $var wire 8 > mem[7] [7:0] $end
    $var wire 8 ? mem[8] [7:0] $end
    $var wire 8 @ mem[9] [7:0] $end
    $var wire 8 A mem[10] [7:0] $end
    $var wire 8 B mem[11] [7:0] $end
    $var wire 8 C mem[12] [7:0] $end
    $var wire 8 D mem[13] [7:0] $end
    $var wire 8 E mem[14] [7:0] $end
    $var wire 8 F mem[15] [7:0] $end
    $var wire 8 G refresh_counter [7:0] $end
   $upscope $end
  $upscope $end
  $scope module invalid_inst $end
   $var wire 32 ] DATA_WIDTH [31:0] $end
   $var wire 32 ^ ADDR_WIDTH [31:0] $end
   $var wire 1 X clk $end
   $var wire 1 Y reset $end
   $var wire 4 [ addr [3:0] $end
   $var wire 8 \ data_in [7:0] $end
   $var wire 1 Z write_en $end
   $var wire 8 ` data_out [7:0] $end
   $var wire 32 _ DEPTH [31:0] $end
  $upscope $end
  $scope module rom_inst $end
   $var wire 32 ] DATA_WIDTH [31:0] $end
   $var wire 32 ^ ADDR_WIDTH [31:0] $end
   $var wire 1 X clk $end
   $var wire 1 Y reset $end
   $var wire 4 [ addr [3:0] $end
   $var wire 8 \ data_in [7:0] $end
   $var wire 1 Z write_en $end
   $var wire 8 6 data_out [7:0] $end
   $var wire 32 _ DEPTH [31:0] $end
   $scope module rom_memory $end
    $var wire 8 # mem[0] [7:0] $end
    $var wire 8 $ mem[1] [7:0] $end
    $var wire 8 % mem[2] [7:0] $end
    $var wire 8 & mem[3] [7:0] $end
    $var wire 8 ' mem[4] [7:0] $end
    $var wire 8 ( mem[5] [7:0] $end
    $var wire 8 ) mem[6] [7:0] $end
    $var wire 8 * mem[7] [7:0] $end
    $var wire 8 + mem[8] [7:0] $end
    $var wire 8 , mem[9] [7:0] $end
    $var wire 8 - mem[10] [7:0] $end
    $var wire 8 . mem[11] [7:0] $end
    $var wire 8 / mem[12] [7:0] $end
    $var wire 8 0 mem[13] [7:0] $end
    $var wire 8 1 mem[14] [7:0] $end
    $var wire 8 2 mem[15] [7:0] $end
    $scope module unnamedblk1 $end
     $var wire 32 3 i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
  $scope module sram_inst $end
   $var wire 32 ] DATA_WIDTH [31:0] $end
   $var wire 32 ^ ADDR_WIDTH [31:0] $end
   $var wire 1 X clk $end
   $var wire 1 Y reset $end
   $var wire 4 [ addr [3:0] $end
   $var wire 8 \ data_in [7:0] $end
   $var wire 1 Z write_en $end
   $var wire 8 4 data_out [7:0] $end
   $var wire 32 _ DEPTH [31:0] $end
   $scope module sram_memory $end
    $var wire 8 H mem[0] [7:0] $end
    $var wire 8 I mem[1] [7:0] $end
    $var wire 8 J mem[2] [7:0] $end
    $var wire 8 K mem[3] [7:0] $end
    $var wire 8 L mem[4] [7:0] $end
    $var wire 8 M mem[5] [7:0] $end
    $var wire 8 N mem[6] [7:0] $end
    $var wire 8 O mem[7] [7:0] $end
    $var wire 8 P mem[8] [7:0] $end
    $var wire 8 Q mem[9] [7:0] $end
    $var wire 8 R mem[10] [7:0] $end
    $var wire 8 S mem[11] [7:0] $end
    $var wire 8 T mem[12] [7:0] $end
    $var wire 8 U mem[13] [7:0] $end
    $var wire 8 V mem[14] [7:0] $end
    $var wire 8 W mem[15] [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000011 $
b00000110 %
b00001001 &
b00001100 '
b00001111 (
b00010010 )
b00010101 *
b00011000 +
b00011011 ,
b00011110 -
b00100001 .
b00100100 /
b00100111 0
b00101010 1
b00101101 2
b00000000000000000000000000010000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000 =
b00000000 >
b00000000 ?
b00000000 @
b00000000 A
b00000000 B
b00000000 C
b00000000 D
b00000000 E
b00000000 F
b00000000 G
b00000000 H
b00000000 I
b00000000 J
b00000000 K
b00000000 L
b00000000 M
b00000000 N
b00000000 O
b00000000 P
b00000000 Q
b00000000 R
b00000000 S
b00000000 T
b00000000 U
b00000000 V
b00000000 W
0X
1Y
0Z
b0000 [
b00000000 \
b00000000000000000000000000001000 ]
b00000000000000000000000000000100 ^
b00000000000000000000000000010000 _
b00000000 `
#5
1X
#10
0X
#15
1X
#20
0X
0Y
#25
b00000001 G
1X
#30
0X
1Z
b0101 [
b10101010 \
#35
b00001111 6
b10101010 <
b00000010 G
b10101010 M
1X
#40
0X
0Z
#45
b10101010 4
b10101010 5
b00000011 G
1X
#50
0X
b0011 [
#55
b00000000 4
b00000000 5
b00001001 6
b00000100 G
1X
#60
0X
#65
b00000101 G
1X
#70
0X
#75
b00000110 G
1X
#80
0X
#85
b00000111 G
1X
#90
0X
#95
b00001000 G
1X
#100
0X
#105
b00001001 G
1X
#110
0X
