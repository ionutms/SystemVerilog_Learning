$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module localparam_calculator_testbench $end
  $var wire 1 M clk $end
  $var wire 1 # reset_n $end
  $var wire 16 $ mult_a [15:0] $end
  $var wire 16 % mult_b [15:0] $end
  $var wire 16 , mult_result [15:0] $end
  $var wire 1 & mult_start $end
  $var wire 1 - mult_valid $end
  $var wire 16 . mult_result_fast [15:0] $end
  $var wire 1 / mult_valid_fast $end
  $var wire 1 ' fifo_push $end
  $var wire 1 ( fifo_pop $end
  $var wire 8 ) fifo_data_in [7:0] $end
  $var wire 8 0 fifo_data_out [7:0] $end
  $var wire 1 1 fifo_full $end
  $var wire 1 2 fifo_empty $end
  $var wire 1 3 fifo_almost_full $end
  $var wire 1 4 fifo_almost_empty $end
  $scope module mult_fast $end
   $var wire 32 N DATA_WIDTH [31:0] $end
   $var wire 32 O FRAC_BITS [31:0] $end
   $var real 64 P CLK_FREQ_MHZ $end
   $var wire 1 M clk $end
   $var wire 1 # reset_n $end
   $var wire 16 $ a [15:0] $end
   $var wire 16 % b [15:0] $end
   $var wire 1 & start $end
   $var wire 16 . result [15:0] $end
   $var wire 1 / valid $end
   $var wire 32 R PRODUCT_WIDTH [31:0] $end
   $var wire 32 O INT_BITS [31:0] $end
   $var wire 16 S MAX_VALUE [15:0] $end
   $var wire 16 T MIN_VALUE [15:0] $end
   $var real 64 U CLK_PERIOD_NS $end
   $var wire 32 W PIPELINE_STAGES [31:0] $end
   $var wire 32 X TIMEOUT_CYCLES [31:0] $end
   $var wire 16 . mult_result [15:0] $end
   $var wire 1 / mult_valid $end
   $scope module two_stage $end
    $var wire 16 5 a_reg [15:0] $end
    $var wire 16 6 b_reg [15:0] $end
    $var wire 32 7 product_reg [31:0] $end
    $var wire 1 8 start_reg $end
   $upscope $end
  $upscope $end
  $scope module mult_slow $end
   $var wire 32 N DATA_WIDTH [31:0] $end
   $var wire 32 O FRAC_BITS [31:0] $end
   $var real 64 Y CLK_FREQ_MHZ $end
   $var wire 1 M clk $end
   $var wire 1 # reset_n $end
   $var wire 16 $ a [15:0] $end
   $var wire 16 % b [15:0] $end
   $var wire 1 & start $end
   $var wire 16 , result [15:0] $end
   $var wire 1 - valid $end
   $var wire 32 R PRODUCT_WIDTH [31:0] $end
   $var wire 32 O INT_BITS [31:0] $end
   $var wire 16 S MAX_VALUE [15:0] $end
   $var wire 16 T MIN_VALUE [15:0] $end
   $var real 64 [ CLK_PERIOD_NS $end
   $var wire 32 ] PIPELINE_STAGES [31:0] $end
   $var wire 32 ^ TIMEOUT_CYCLES [31:0] $end
   $var wire 16 , mult_result [15:0] $end
   $var wire 1 - mult_valid $end
   $scope module single_stage $end
    $var wire 32 9 product [31:0] $end
   $upscope $end
  $upscope $end
  $scope module test_fifo $end
   $var wire 32 O DATA_WIDTH [31:0] $end
   $var wire 32 _ MIN_DEPTH [31:0] $end
   $var wire 1 M clk $end
   $var wire 1 # reset_n $end
   $var wire 1 ' push $end
   $var wire 1 ( pop $end
   $var wire 8 ) data_in [7:0] $end
   $var wire 8 0 data_out [7:0] $end
   $var wire 1 1 full $end
   $var wire 1 2 empty $end
   $var wire 1 3 almost_full $end
   $var wire 1 4 almost_empty $end
   $var wire 32 ` ADDR_WIDTH [31:0] $end
   $var wire 32 N ACTUAL_DEPTH [31:0] $end
   $var wire 32 a ALMOST_FULL_THRESH [31:0] $end
   $var wire 32 ` ALMOST_EMPTY_THRESH [31:0] $end
   $var wire 5 b FULL_COUNT [4:0] $end
   $var wire 8 : memory[0] [7:0] $end
   $var wire 8 ; memory[1] [7:0] $end
   $var wire 8 < memory[2] [7:0] $end
   $var wire 8 = memory[3] [7:0] $end
   $var wire 8 > memory[4] [7:0] $end
   $var wire 8 ? memory[5] [7:0] $end
   $var wire 8 @ memory[6] [7:0] $end
   $var wire 8 A memory[7] [7:0] $end
   $var wire 8 B memory[8] [7:0] $end
   $var wire 8 C memory[9] [7:0] $end
   $var wire 8 D memory[10] [7:0] $end
   $var wire 8 E memory[11] [7:0] $end
   $var wire 8 F memory[12] [7:0] $end
   $var wire 8 G memory[13] [7:0] $end
   $var wire 8 H memory[14] [7:0] $end
   $var wire 8 I memory[15] [7:0] $end
   $var wire 4 J write_ptr [3:0] $end
   $var wire 4 K read_ptr [3:0] $end
   $var wire 5 L count [4:0] $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 * i [31:0] $end
  $upscope $end
  $scope module unnamedblk2 $end
   $var wire 32 + i [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b0000000000000000 $
b0000000000000000 %
0&
0'
0(
b00000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b0000000000000000 ,
0-
b0000000000000000 .
0/
b00000000 0
01
12
03
14
b0000000000000000 5
b0000000000000000 6
b00000000000000000000000000000000 7
08
b00000000000000000000000000000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000 =
b00000000 >
b00000000 ?
b00000000 @
b00000000 A
b00000000 B
b00000000 C
b00000000 D
b00000000 E
b00000000 F
b00000000 G
b00000000 H
b00000000 I
b0000 J
b0000 K
b00000 L
0M
b00000000000000000000000000010000 N
b00000000000000000000000000001000 O
r150 P
b00000000000000000000000000100000 R
b0111111111111111 S
b1000000000000000 T
r6.666666666666667 U
b00000000000000000000000000000010 W
b00000000000000000000010111011100 X
r50 Y
r20 [
b00000000000000000000000000000001 ]
b00000000000000000000000111110100 ^
b00000000000000000000000000001010 _
b00000000000000000000000000000100 `
b00000000000000000000000000001100 a
b10000 b
#5
1M
#10
0M
#15
1M
#20
0M
#25
1M
#30
1#
0M
#35
1M
#40
0M
#45
1M
#50
b0000001110000000 $
b0000001001000000 %
1&
0M
#55
0&
b0000011111100000 ,
b0000001110000000 5
b0000001001000000 6
b00000000000001111110000000000000 9
1M
#60
0M
#65
b00000000000001111110000000000000 7
1M
#70
0M
#75
b0000011111100000 .
1M
#80
0M
#85
1M
#90
0M
#95
1M
#100
0M
#105
1M
#110
0M
#115
1M
#120
0M
#125
1'
b00001010 )
b00000000000000000000000000000001 *
b00001010 0
02
b00001010 :
b0001 J
b00001 L
1M
#130
0M
#135
b00001011 )
b00000000000000000000000000000010 *
b00001011 ;
b0010 J
b00010 L
1M
#140
0M
#145
b00001100 )
b00000000000000000000000000000011 *
b00001100 <
b0011 J
b00011 L
1M
#150
0M
#155
b00001101 )
b00000000000000000000000000000100 *
b00001101 =
b0100 J
b00100 L
1M
#160
0M
#165
b00001110 )
b00000000000000000000000000000101 *
04
b00001110 >
b0101 J
b00101 L
1M
#170
0M
#175
b00001111 )
b00000000000000000000000000000110 *
b00001111 ?
b0110 J
b00110 L
1M
#180
0M
#185
b00010000 )
b00000000000000000000000000000111 *
b00010000 @
b0111 J
b00111 L
1M
#190
0M
#195
0'
b00010001 )
b00000000000000000000000000001000 *
1M
#200
0M
#205
1M
#210
0M
#215
1(
b00001011 0
b0001 K
b00110 L
1M
#216
b00000000000000000000000000000001 +
#220
0M
#225
b00001100 0
b0010 K
b00101 L
1M
#226
b00000000000000000000000000000010 +
#230
0M
#235
b00001101 0
14
b0011 K
b00100 L
1M
#236
b00000000000000000000000000000011 +
#240
0M
#245
b00001110 0
b0100 K
b00011 L
1M
#246
b00000000000000000000000000000100 +
#250
0M
#255
b00001111 0
b0101 K
b00010 L
1M
#256
b00000000000000000000000000000101 +
#260
0M
#265
b00010000 0
b0110 K
b00001 L
1M
#266
b00000000000000000000000000000110 +
#270
0M
#275
b00000000 0
12
b0111 K
b00000 L
1M
#276
b00000000000000000000000000000111 +
#280
0M
#285
0(
1M
