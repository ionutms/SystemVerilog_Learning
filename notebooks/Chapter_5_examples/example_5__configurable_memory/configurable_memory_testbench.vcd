$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module configurable_memory_testbench $end
  $var wire 1 @ clk $end
  $var wire 1 # reset_n $end
  $var wire 1 $ small_we $end
  $var wire 4 % small_addr [3:0] $end
  $var wire 8 & small_wdata [7:0] $end
  $var wire 8 A small_rdata [7:0] $end
  $var wire 1 ' large_we $end
  $var wire 10 ( large_addr [9:0] $end
  $var wire 16 ) large_wdata [15:0] $end
  $var wire 16 B large_rdata [15:0] $end
  $var wire 1 * custom_we $end
  $var wire 8 + custom_addr [7:0] $end
  $var wire 32 , custom_wdata [31:0] $end
  $var wire 32 C custom_rdata [31:0] $end
  $scope module custom_memory $end
   $var wire 32 D MEMORY_DEPTH [31:0] $end
   $var real 64 E ACCESS_DELAY_NS $end
   $var wire 1 @ clk $end
   $var wire 1 # reset_n $end
   $var wire 1 * write_enable $end
   $var wire 8 + address [7:0] $end
   $var wire 32 , write_data [31:0] $end
   $var wire 32 C read_data [31:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 - i [31:0] $end
   $upscope $end
  $upscope $end
  $scope module large_memory $end
   $var wire 32 G MEMORY_DEPTH [31:0] $end
   $var real 64 H ACCESS_DELAY_NS $end
   $var wire 1 @ clk $end
   $var wire 1 # reset_n $end
   $var wire 1 ' write_enable $end
   $var wire 10 ( address [9:0] $end
   $var wire 16 ) write_data [15:0] $end
   $var wire 16 B read_data [15:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 . i [31:0] $end
   $upscope $end
  $upscope $end
  $scope module small_memory $end
   $var wire 32 J MEMORY_DEPTH [31:0] $end
   $var real 64 K ACCESS_DELAY_NS $end
   $var wire 1 @ clk $end
   $var wire 1 # reset_n $end
   $var wire 1 $ write_enable $end
   $var wire 4 % address [3:0] $end
   $var wire 8 & write_data [7:0] $end
   $var wire 8 A read_data [7:0] $end
   $var wire 8 / memory_array[0] [7:0] $end
   $var wire 8 0 memory_array[1] [7:0] $end
   $var wire 8 1 memory_array[2] [7:0] $end
   $var wire 8 2 memory_array[3] [7:0] $end
   $var wire 8 3 memory_array[4] [7:0] $end
   $var wire 8 4 memory_array[5] [7:0] $end
   $var wire 8 5 memory_array[6] [7:0] $end
   $var wire 8 6 memory_array[7] [7:0] $end
   $var wire 8 7 memory_array[8] [7:0] $end
   $var wire 8 8 memory_array[9] [7:0] $end
   $var wire 8 9 memory_array[10] [7:0] $end
   $var wire 8 : memory_array[11] [7:0] $end
   $var wire 8 ; memory_array[12] [7:0] $end
   $var wire 8 < memory_array[13] [7:0] $end
   $var wire 8 = memory_array[14] [7:0] $end
   $var wire 8 > memory_array[15] [7:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 ? i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b0000 %
b00000000 &
0'
b0000000000 (
b0000000000000000 )
0*
b00000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000 =
b00000000 >
b00000000000000000000000000000000 ?
0@
b00000000 A
b0000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000100000000 D
r0.8 E
b00000000000000000000010000000000 G
r3.5 H
b00000000000000000000000000010000 J
r1 K
#5
b00000000000000000000000100000000 -
b00000000000000000000010000000000 .
b00000000000000000000000000010000 ?
1@
#10
0@
#15
1@
#20
1#
0@
#25
1@
#30
1$
b0101 %
b10101011 &
0@
#35
b10101011 4
1@
b10101011 A
#40
0$
0@
#45
1@
#50
1$
b0010 %
b00010001 &
0@
b00000000 A
#55
b00010001 1
1@
b00010001 A
#60
b0111 %
b00100010 &
0@
b00000000 A
#65
b00100010 6
1@
b00100010 A
#70
b1111 %
b11111111 &
0@
b00000000 A
#75
b11111111 >
1@
b11111111 A
#80
0$
b0010 %
0@
b00010001 A
#85
1@
#90
b0101 %
0@
b10101011 A
#95
1@
#100
b0111 %
0@
b00100010 A
#105
1@
#110
b1111 %
0@
b11111111 A
#115
1@
#120
1'
b0100100011 (
b1101111010101101 )
0@
#125
1@
b1101111010101101 B
#130
0'
0@
#135
1@
#140
1'
b0000000000 (
b0001001000110100 )
0@
b0000000000000000 B
#145
1@
b0001001000110100 B
#150
b0100000000 (
b0101011001111000 )
0@
b0000000000000000 B
#155
1@
b0101011001111000 B
#160
b1000000000 (
b1001101010111100 )
0@
b0000000000000000 B
#165
1@
b1001101010111100 B
#170
b1111111111 (
b1011111011101111 )
0@
b0000000000000000 B
#175
1@
b1011111011101111 B
#180
0'
b0000000000 (
0@
b0001001000110100 B
#185
1@
#190
b0100000000 (
0@
b0101011001111000 B
#195
1@
#200
b0100100011 (
0@
b1101111010101101 B
#205
1@
#210
b1000000000 (
0@
b1001101010111100 B
#215
1@
#220
b1111111111 (
0@
b1011111011101111 B
#225
1@
#230
1*
b01000010 +
b11001010111111101011101010111110 ,
0@
#235
1@
b11001010111111101011101010111110 C
#240
0*
0@
#245
1@
#250
1*
b00000000 +
b00010010001101000101011001111000 ,
0@
b00000000000000000000000000000000 C
#255
1@
b00010010001101000101011001111000 C
#260
b00010000 +
b10000111011001010100001100100001 ,
0@
b00000000000000000000000000000000 C
#265
1@
b10000111011001010100001100100001 C
#270
b10000000 +
b10100101101001011010010110100101 ,
0@
b00000000000000000000000000000000 C
#275
1@
b10100101101001011010010110100101 C
#280
b11111111 +
b01011010010110100101101001011010 ,
0@
b00000000000000000000000000000000 C
#285
1@
b01011010010110100101101001011010 C
#290
0*
b00000000 +
0@
b00010010001101000101011001111000 C
#295
1@
#300
b00010000 +
0@
b10000111011001010100001100100001 C
#305
1@
#310
b01000010 +
0@
b11001010111111101011101010111110 C
#315
1@
#320
b10000000 +
0@
b10100101101001011010010110100101 C
#325
1@
#330
b11111111 +
0@
b01011010010110100101101001011010 C
#335
1@
#340
b01000010 +
0@
b11001010111111101011101010111110 C
#345
1@
#350
b0101 %
0@
b10101011 A
#355
1@
#360
b0100100011 (
0@
b1101111010101101 B
#365
1@
#370
0@
#375
1@
#380
0@
#385
1@
#390
0@
#395
1@
#400
0@
#405
1@
#410
0@
#415
1@
#420
0@
