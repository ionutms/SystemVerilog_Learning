$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module ripple_carry_adder_testbench $end
  $var wire 32 b WIDTH_8 [31:0] $end
  $var wire 32 c WIDTH_4 [31:0] $end
  $var wire 8 # a8 [7:0] $end
  $var wire 8 $ b8 [7:0] $end
  $var wire 8 H sum8 [7:0] $end
  $var wire 1 % cin8 $end
  $var wire 1 I cout8 $end
  $var wire 4 & a4 [3:0] $end
  $var wire 4 ' b4 [3:0] $end
  $var wire 4 J sum4 [3:0] $end
  $var wire 1 ( cin4 $end
  $var wire 1 K cout4 $end
  $var wire 9 ) expected_result8 [8:0] $end
  $var wire 5 * expected_result4 [4:0] $end
  $scope module DUT_4bit $end
   $var wire 32 c WIDTH [31:0] $end
   $var wire 4 & a [3:0] $end
   $var wire 4 ' b [3:0] $end
   $var wire 1 ( cin $end
   $var wire 4 J sum [3:0] $end
   $var wire 1 K cout $end
   $var wire 5 L carry [4:0] $end
   $scope module adder_stage[0] $end
    $scope module fa $end
     $var wire 1 + a $end
     $var wire 1 , b $end
     $var wire 1 ( cin $end
     $var wire 1 - sum $end
     $var wire 1 X cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[1] $end
    $scope module fa $end
     $var wire 1 . a $end
     $var wire 1 / b $end
     $var wire 1 X cin $end
     $var wire 1 M sum $end
     $var wire 1 Y cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[2] $end
    $scope module fa $end
     $var wire 1 0 a $end
     $var wire 1 1 b $end
     $var wire 1 Y cin $end
     $var wire 1 N sum $end
     $var wire 1 Z cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[3] $end
    $scope module fa $end
     $var wire 1 2 a $end
     $var wire 1 3 b $end
     $var wire 1 Z cin $end
     $var wire 1 O sum $end
     $var wire 1 K cout $end
    $upscope $end
   $upscope $end
  $upscope $end
  $scope module DUT_8bit $end
   $var wire 32 b WIDTH [31:0] $end
   $var wire 8 # a [7:0] $end
   $var wire 8 $ b [7:0] $end
   $var wire 1 % cin $end
   $var wire 8 H sum [7:0] $end
   $var wire 1 I cout $end
   $var wire 9 P carry [8:0] $end
   $scope module adder_stage[0] $end
    $scope module fa $end
     $var wire 1 4 a $end
     $var wire 1 5 b $end
     $var wire 1 % cin $end
     $var wire 1 6 sum $end
     $var wire 1 [ cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[1] $end
    $scope module fa $end
     $var wire 1 7 a $end
     $var wire 1 8 b $end
     $var wire 1 [ cin $end
     $var wire 1 Q sum $end
     $var wire 1 \ cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[2] $end
    $scope module fa $end
     $var wire 1 9 a $end
     $var wire 1 : b $end
     $var wire 1 \ cin $end
     $var wire 1 R sum $end
     $var wire 1 ] cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[3] $end
    $scope module fa $end
     $var wire 1 ; a $end
     $var wire 1 < b $end
     $var wire 1 ] cin $end
     $var wire 1 S sum $end
     $var wire 1 ^ cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[4] $end
    $scope module fa $end
     $var wire 1 = a $end
     $var wire 1 > b $end
     $var wire 1 ^ cin $end
     $var wire 1 T sum $end
     $var wire 1 _ cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[5] $end
    $scope module fa $end
     $var wire 1 ? a $end
     $var wire 1 @ b $end
     $var wire 1 _ cin $end
     $var wire 1 U sum $end
     $var wire 1 ` cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[6] $end
    $scope module fa $end
     $var wire 1 A a $end
     $var wire 1 B b $end
     $var wire 1 ` cin $end
     $var wire 1 V sum $end
     $var wire 1 a cout $end
    $upscope $end
   $upscope $end
   $scope module adder_stage[7] $end
    $scope module fa $end
     $var wire 1 C a $end
     $var wire 1 D b $end
     $var wire 1 a cin $end
     $var wire 1 W sum $end
     $var wire 1 I cout $end
    $upscope $end
   $upscope $end
  $upscope $end
  $scope module unnamedblk1 $end
   $var wire 32 E i [31:0] $end
   $scope module unnamedblk2 $end
    $var wire 32 F j [31:0] $end
    $scope module unnamedblk3 $end
     $var wire 32 G c [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000000 $
0%
b0000 &
b0000 '
0(
b000000000 )
b00000 *
0+
0,
0-
0.
0/
00
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
0D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000 H
0I
b0000 J
0K
b00000 L
0M
0N
0O
b000000000 P
0Q
0R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
b00000000000000000000000000001000 b
b00000000000000000000000000000100 c
#1
b00001111 #
b00001010 $
b000011001 )
14
16
17
18
19
1;
1<
b00011001 H
b000011100 P
1S
1T
1\
1]
1^
#2
b11111111 #
b00000000 $
b011111111 )
08
0<
1=
1?
1A
1C
b11111111 H
b000000000 P
1Q
1R
1U
1V
1W
0\
0]
0^
#3
b10000000 #
b01111111 $
04
15
07
18
09
1:
0;
1<
0=
1>
0?
1@
0A
1B
#4
b01100100 #
b00110010 $
1%
b010010111 )
05
19
0:
0<
1?
1A
0B
0C
b10010111 H
b011000001 P
0S
0U
0V
1`
1a
#5
b11111111 #
b11111111 $
b111111111 )
14
15
17
1:
1;
1<
1=
1B
1C
1D
b11111111 H
1I
b111111111 P
1S
1U
1V
1[
1\
1]
1^
1_
#6
b00000001 $
0%
b100000000 )
06
08
0:
0<
0>
0@
0B
0D
b00000000 H
b111111110 P
0Q
0R
0S
0T
0U
0V
0W
#7
b11001000 #
b01100100 $
b100101100 )
04
05
07
09
1:
0=
0?
1@
1B
b00101100 H
b110000000 P
1R
1S
1U
0[
0\
0]
0^
0_
0`
#8
b10101010 #
b01010101 $
b011111111 )
15
16
17
1>
1?
0@
0A
b11111111 H
0I
b000000000 P
1Q
1T
1V
1W
0a
#9
b11110000 #
b00001111 $
07
18
0;
1<
1=
0>
1A
0B
#11
b0111 &
b1000 '
b01111 *
1+
1-
1.
10
13
b1111 J
1M
1N
1O
#12
b1111 &
b0000 '
12
03
#13
b1001 &
b0110 '
1(
b10000 *
0-
0.
1/
00
11
b0000 J
1K
b11111 L
0M
0N
0O
1X
1Y
1Z
#14
b1111 &
b1111 '
0(
b11110 *
1,
1.
10
13
b1110 J
b11110 L
1M
1N
1O
#15
1(
b11111 *
1-
b1111 J
b11111 L
#16
b0001 '
0(
b10000 *
0-
0/
01
03
b0000 J
b11110 L
0M
0N
0O
#17
b1010 &
b1000 '
b10010 *
0+
0,
00
13
b0010 J
b10000 L
1M
0X
0Y
0Z
#18
b0000 &
b0000 '
b00000 *
0.
02
03
b0000 J
0K
b00000 L
0M
#19
1(
b00001 *
1-
b00000000000000000000000000000001 G
b0001 J
b00001 L
#20
b0111 '
0(
b00111 *
1,
1/
11
b00000000000000000000000000000111 F
b00000000000000000000000000000010 G
b0111 J
b00000 L
1M
1N
#21
1(
b01000 *
0-
b00000000000000000000000000000001 G
b1000 J
b01111 L
0M
0N
1O
1X
1Y
1Z
#22
b1110 '
0(
b01110 *
0,
13
b00000000000000000000000000001110 F
b00000000000000000000000000000010 G
b1110 J
b00000 L
1M
1N
0X
0Y
0Z
#23
1(
b01111 *
1-
b00000000000000000000000000000001 G
b1111 J
b00001 L
#24
b0101 &
b0000 '
0(
b00101 *
1+
0/
10
01
03
b00000000000000000000000000000101 E
b00000000000000000000000000010101 F
b00000000000000000000000000000010 G
b0101 J
b00000 L
0M
0O
#25
1(
b00110 *
0-
b00000000000000000000000000000001 G
b0110 J
b00011 L
1M
1X
#26
b0111 '
0(
b01100 *
1,
1/
11
b00000000000000000000000000000111 F
b00000000000000000000000000000010 G
b1100 J
b01110 L
0M
1O
1Y
1Z
#27
1(
b01101 *
1-
b00000000000000000000000000000001 G
b1101 J
b01111 L
#28
b1110 '
0(
b10011 *
0,
13
b00000000000000000000000000001110 F
b00000000000000000000000000000010 G
b0011 J
1K
b11000 L
1M
0N
0O
0X
0Y
#29
1(
b10100 *
0-
b00000000000000000000000000000001 G
b0100 J
b11111 L
0M
1N
1X
1Y
#30
b1010 &
b0000 '
0(
b01010 *
0+
1.
0/
00
01
12
03
b00000000000000000000000000001010 E
b00000000000000000000000000010101 F
b00000000000000000000000000000010 G
b1010 J
0K
b00000 L
1M
0N
1O
0X
0Y
0Z
#31
1(
b01011 *
1-
b00000000000000000000000000000001 G
b1011 J
b00001 L
#32
b0111 '
0(
b10001 *
1,
1/
11
b00000000000000000000000000000111 F
b00000000000000000000000000000010 G
b0001 J
1K
b11100 L
0M
0O
1Y
1Z
#33
1(
b10010 *
0-
b00000000000000000000000000000001 G
b0010 J
b11111 L
1M
1X
#34
b1110 '
0(
b11000 *
0,
13
b00000000000000000000000000001110 F
b00000000000000000000000000000010 G
b1000 J
b11100 L
0M
1O
0X
#35
1(
b11001 *
1-
b00000000000000000000000000000001 G
b1001 J
b11101 L
#36
b1111 &
b0000 '
0(
b01111 *
1+
0/
10
01
03
b00000000000000000000000000001111 E
b00000000000000000000000000010101 F
b00000000000000000000000000000010 G
b1111 J
0K
b00000 L
1M
1N
0Y
0Z
#37
1(
b10000 *
0-
b00000000000000000000000000000001 G
b0000 J
1K
b11111 L
0M
0N
0O
1X
1Y
1Z
#38
b0111 '
0(
b10110 *
1,
1/
11
b00000000000000000000000000000111 F
b00000000000000000000000000000010 G
b0110 J
b11110 L
1M
1N
#39
1(
b10111 *
1-
b00000000000000000000000000000001 G
b0111 J
b11111 L
#40
b1110 '
0(
b11101 *
0,
13
b00000000000000000000000000001110 F
b00000000000000000000000000000010 G
b1101 J
b11100 L
0M
1O
0X
#41
1(
b11110 *
0-
b00000000000000000000000000000001 G
b1110 J
b11111 L
1M
1X
#42
b11111111 #
b00000000 $
1%
14
05
06
17
08
19
0:
1;
0<
b00000000000000000000000000010100 E
b00000000000000000000000000010101 F
b00000000000000000000000000000010 G
b00000000 H
1I
b111111111 P
0Q
0R
0S
0T
0U
0V
0W
1[
1\
1]
1^
1_
1`
1a
#43
