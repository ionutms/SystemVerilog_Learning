name: Render and Deploy Quarto Website

# When to run this workflow
on:
  # Trigger on push to publish branch
  push:
    branches: [publish]
  # Allow manual triggering
  workflow_dispatch:

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Prevent concurrent deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for better caching

      # Step 2: Setup Quarto
      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      # Step 3: Install TinyTeX for PDF generation
      - name: Install TinyTeX
        run: |
          quarto install tinytex

      # Step 4: Setup Python (for Jupyter notebooks)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'  # Cache pip dependencies

      # Step 5: Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jupyter nbformat nbconvert
          # Add any other dependencies your notebook needs
          # pip install matplotlib numpy pandas seaborn plotly
          # If you have a requirements.txt file:
          # pip install -r requirements.txt

      # Step 6: Setup R (if you have R content)
      # Uncomment if you need R support
      # - name: Set up R
      #   uses: r-lib/actions/setup-r@v2
      #   with:
      #     r-version: '4.3.1'

      # - name: Install R dependencies
      #   run: |
      #     install.packages(c("rmarkdown", "knitr"))
      #   shell: Rscript {0}

      # Step 6.5: Debug - List files to see what exists
      - name: Debug - List notebook files
        run: |
          echo "Contents of notebooks directory:"
          ls -la notebooks/ || echo "notebooks directory does not exist"
          echo "Checking specific files mentioned in _quarto.yml:"
          ls -la notebooks/Chapter_*.ipynb || echo "No Chapter files found"

      # Step 6.6: Create necessary directories
      - name: Create output directories
        run: |
          mkdir -p _site
          mkdir -p _site/notebooks

      # Step 7: Render the entire website (this will respect _quarto.yml render list)
      - name: Render website
        run: |
          echo "Rendering entire website using _quarto.yml configuration"
          # First try to render, but don't fail the entire job if some files have issues
          quarto render || echo "Some files failed to render, but continuing..."
          
          # Check what was actually rendered
          echo "Contents of _site directory after rendering:"
          ls -la _site/ || echo "_site directory is empty or doesn't exist"
          ls -la _site/notebooks/ || echo "_site/notebooks directory is empty or doesn't exist"

      # Step 7.5: Create fallback index if rendering failed completely
      - name: Create fallback content if needed
        run: |
          if [ ! -f "_site/index.html" ]; then
            echo "No index.html found, creating fallback..."
            mkdir -p _site
            cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>SystemVerilog Guide - Build in Progress</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
              body { 
                font-family: Arial, sans-serif; 
                max-width: 800px; 
                margin: 0 auto; 
                padding: 20px; 
                background: #f5f5f5; 
              }
              .container { 
                background: white; 
                padding: 40px; 
                border-radius: 8px; 
                box-shadow: 0 2px 4px rgba(0,0,0,0.1); 
              }
              h1 { color: #333; }
              .status { 
                background: #fff3cd; 
                border: 1px solid #ffeaa7; 
                padding: 15px; 
                border-radius: 4px; 
                margin: 20px 0; 
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>SystemVerilog Guide</h1>
              <div class="status">
                <strong>Build Status:</strong> The website is currently being built. 
                Some content may be temporarily unavailable while we resolve rendering issues.
              </div>
              <p>This comprehensive SystemVerilog programming guide is currently under construction.</p>
              <p>Please check back soon or visit our 
                <a href="https://github.com/ionutms/SystemVerilog_Learning">GitHub repository</a> 
                for the latest updates.
              </p>
            </div>
          </body>
          </html>
          EOF
          fi

      # Step 8: Setup GitHub Pages (configure before upload)
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Step 9: Upload artifact for GitHub Pages
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  # Deploy job (only runs on publish branch)
  deploy:
    # Only deploy on publish, not on PRs
    if: github.ref == 'refs/heads/publish'
    
    # Depend on build job
    needs: build
    
    # Deploy to GitHub Pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4